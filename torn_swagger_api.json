{
    "openapi": "3.1.0",
    "info": {
        "title": "Torn API",
        "description": "\n * The development of Torn's API v2 is still ongoing.\n * If selections remain unaltered, they will default to the API v1 version.\n * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.\n * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.\n * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.",
        "version": "1.5.0"
    },
    "servers": [
        {
            "url": "https://api.torn.com/v2",
            "description": "This is the base URL"
        }
    ],
    "paths": {
        "/user/attacks": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your detailed attacks",
                "description": "Requires limited access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionAttacksResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/attacksfull": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your simplified attacks",
                "description": "Requires limited access key. <br>Returns up to 1,000 rows. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit1000"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionAttacksFullResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/bounties": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get bounties placed on you",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserBountiesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/{id}/bounties": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get bounties placed on a specific user",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserBountiesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/calendar": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your competition's event start time",
                "description": "Requires minimal access key. <br>Only available to yourself.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCalendarResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/{crimeId}/crimes": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your crime statistics",
                "description": "Requires minimal access key. <br>Return the details and statistics about for a specific crime.",
                "parameters": [
                    {
                        "name": "crimeId",
                        "in": "path",
                        "description": "Crime id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/TornCrimeId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCrimesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/education": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your education information",
                "description": "The response contains a list of complete eduactions and of a current education (if any).",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserEducationResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/user/enlistedcars": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user enlisted cars",
                "description": "Requires minimal access key. <br>Returns a list of all user enlisted cars.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserEnlistedCarsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/factionbalance": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your current faction balance",
                "description": "Requires limited access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserFactionBalanceResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/forumfeed": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get updates on your threads and posts",
                "description": "Requires minimal access key. <br>This selection returns data visible in 'Feed' section on forum page. Feed is sorted by timestamp descending. Only a maximum of 100 rows are returned.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserForumFeedResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/forumfriends": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get updates on your friends' activity",
                "description": "Requires minimal access key. <br>This selection returns data visible in 'Friends' section on forum page. Feed is sorted by timestamp descending. Only a maximum of 100 rows are returned.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserForumFriendsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/forumposts": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your posts",
                "description": "Requires public access key. <br>Returns 20 posts per page.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserForumPostsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/{id}/forumposts": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get posts for a specific player",
                "description": "Requires public access key. <br>Returns 20 posts per page for a specific player.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserForumPostsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/forumsubscribedthreads": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get updates on threads you subscribed to",
                "description": "Requires minimal access key. <br>This selection returns data visible in 'Subscribed Threads' section on forum page. Threads are sorted in the same way as on site.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserForumSubscribedThreadsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/forumthreads": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your threads",
                "description": "Requires public access key. <br>Returns 100 threads per page. The field 'new_posts' is also available, indicating the amount of unread posts with a Minimum API key (or higher).",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100Default20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserForumThreadsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/{id}/forumthreads": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get threads for a specific player",
                "description": "Requires public access key. <br>Returns 100 threads per page for a specific player. When requesting data for the key owner, a field 'new_posts' is also available, indicating the amount of unread posts. Minimum API key is required for that.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit100Default20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserForumThreadsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/hof": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your hall of fame rankings",
                "description": "Requires public access key. <br>When requesting selection with Limited, Full or Custom key, battle_stats selection will be populated.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserHofResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/{id}/hof": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get hall of fame rankings for a specific player",
                "description": "Requires public access key. <br>The battle_stats selection will be populated only when requesting selection with Limited, Full or Custom key and for yourself.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserHofResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/itemmarket": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your item market listings for a specific item",
                "description": "Requires limited access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserItemMarketResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/jobranks": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your starter job positions",
                "description": "Requires minimal access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserJobRanksResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/list": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your friends, enemies or targets list",
                "description": "Requires limited access key. <br>",
                "parameters": [
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Select list type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserListEnum"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit50"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortAsc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserListResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/organizedcrime": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your current ongoing organized crime",
                "description": "Requires minimal access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOrganizedCrimeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/personalstats": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your personal stats",
                "description": "Requires public access key. <br>\n * UserPersonalStatsFull is returned only when this selection is requested with Limited, Full or Custom key access key.\n * UserPersonalStatsFullPublic is returned when the requested category is 'all'.\n * UserPersonalStatsPopular is returned when the requested category is 'popular'. Please try to use UserPersonalStatsPopular over UserPersonalStatsFullPublic wherever possible in order to reduce the server load.\n * Otherwise, UserPersonalStatsCategory is returned for the matched category.\n * It's possible to request specific stats via 'stat' parameter. In this case the response will vary depending on the stats requested. Private stats are still available only to the key owner (with Limited or higher key).\n * Additionally, historical stats can also be fetched via 'stat' query parameter, but 'timestamp' parameter must be provided as well. It's only possible to pass up to 10 historical stats at once (the rest is trimmed). When requesting historical stats the response will be of type UserPersonalStatsHistoric.",
                "parameters": [
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Stats category. Required unless requesting specific stats via 'stat' query parameter",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PersonalStatsCategoryEnum"
                        }
                    },
                    {
                        "name": "stat",
                        "in": "query",
                        "description": "Stat names (10 maximum). Used to fetch historical stat values",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/PersonalStatsStatName"
                            }
                        }
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "Returns stats until this timestamp (converted to nearest date).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPersonalStatsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/{id}/personalstats": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get a player's personal stats",
                "description": "Requires public access key. <br>\n *  UserPersonalStatsFull is returned only when this selection is requested for the key owner with Limited, Full or Custom key.\n *  UserPersonalStatsFullPublic is returned when the requested category is 'all'.\n *  UserPersonalStatsPopular is returned when the requested category is 'popular'. Please try to use UserPersonalStatsPopular over UserPersonalStatsFullPublic wherever possible in order to reduce the server load.\n *  Otherwise, UserPersonalStatsCategory is returned for the matched category.\n *  It's possible to request specific stats via 'stat' parameter. In this case the response will vary depending on the stats requested. Private stats are still available only to the key owner (with Limited or higher key).\n *  Additionally, historical stats can also be fetched via 'stat' query parameter, but 'timestamp' parameter must be provided as well. It's only possible to pass up to 10 historical stats at once (the rest is trimmed). When requesting historical stats the response will be of type UserPersonalStatsHistoric.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PersonalStatsCategoryEnum"
                        }
                    },
                    {
                        "name": "stat",
                        "in": "query",
                        "description": "Stat names (10 maximum). Used to fetch historical stat values",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/PersonalStatsStatName"
                            }
                        }
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "Returns stats until this timestamp (converted to nearest date).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPersonalStatsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/races": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user races",
                "description": "Requires minimal access key. <br>Returns a list of user races, ordered by race start timestamp.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100Default20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Category of races returned",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "custom",
                            "enum": [
                                "official",
                                "custom"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRacesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/revives": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your detailed revives",
                "description": "Requires limited access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100Default20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RevivesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/revivesFull": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get your simplified revives",
                "description": "Requires limited access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit1000Default20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RevivesFullResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/lookup": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all available user selections",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserLookupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user/timestamp": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get current server time",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimestampResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get any User selection",
                "description": "Key access level depends on the required selections. <br>Choose one or more selections (comma separated).",
                "parameters": [
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "Selection names",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserSelectionName"
                            }
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "selection id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Selection category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "stat",
                        "in": "query",
                        "description": "Selection stat",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTags"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/UserCrimesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserRacesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserEnlistedCarsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserForumPostsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserForumThreadsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserForumSubscribedThreadsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserForumFeedResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserForumFriendsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserHofResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserCalendarResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserEducationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserBountiesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserJobRanksResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserFactionBalanceResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RevivesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RevivesFullResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserItemMarketResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserListResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserPersonalStatsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserOrganizedCrimeResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionAttacksResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionAttacksFullResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UserLookupResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TimestampResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/applications": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's applications",
                "description": "Requires minimal access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionApplicationsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/attacks": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's detailed attacks",
                "description": "Requires limited access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionAttacksResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/attacksfull": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's simplified attacks",
                "description": "Requires limited access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit1000"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionAttacksFullResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/balance": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's & member's balance details",
                "description": "Requires limited access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionBalanceResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/basic": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's basic details",
                "description": "Requires public access key. <br> The 'is_enlisted' value will be populated if you have API faction permissions (with custom, limited or full access keys), otherwise it will be set as null.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionBasicResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{id}/basic": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a faction's basic details",
                "description": "Requires public access key. <br> The 'is_enlisted' value will be populated if you're requesting data for your faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as null.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionBasicResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/chain": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's current chain",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionOngoingChainResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{id}/chain": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a faction's current chain",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionOngoingChainResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/chains": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of your faction's completed chains",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionChainsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{id}/chains": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of a faction's completed chains",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionChainsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/chainreport": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's latest chain report",
                "description": "Requires public access key. <br> This includes currently ongoing chains.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionChainReportResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{chainId}/chainreport": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a chain report",
                "description": "Requires public access key. <br> Chain reports for ongoing chains are available only for your own faction.",
                "parameters": [
                    {
                        "name": "chainId",
                        "in": "path",
                        "description": "Chain id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ChainId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionChainReportResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/contributors": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's challenge contributors",
                "description": "Requires limiteed access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "name": "stat",
                        "in": "query",
                        "description": "Get contributors for this field.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionStatEnum"
                        }
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "current"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionContributorsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/crimes": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's organized crimes",
                "description": "Requires minimal access key with faction API access permissions. <br> It's possible to get older entries either by timestamp range (from, to) or with offset.",
                "parameters": [
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "all",
                                "recruiting",
                                "planning",
                                "failure",
                                "successful",
                                "expired",
                                "available",
                                "completed"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionCrimesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{crimeId}/crime": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a specific organized crime",
                "description": "Requires minimal access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "name": "crimeId",
                        "in": "path",
                        "description": "Crime id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionCrimeId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionCrimeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/hof": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's hall of fame rankings.",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionHofResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{id}/hof": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a faction's hall of fame rankings.",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionHofResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/members": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of your faction's members",
                "description": "Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionMembersResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{id}/members": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of a faction's members",
                "description": "Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you're requesting data for your own faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionMembersResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/news": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's news details",
                "description": "Requires minimal access key with faction API access permissions. <br> It is possible to pass up to 10 categories at the time (comma separated). Categories 'attack', 'depositFunds' and 'giveFunds' are only available with 'Custom', 'Limited' or 'Full' access keys.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiStripTagsFalse"
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "News category type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionNewsCategory"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionNewsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/positions": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's positions details",
                "description": "Requires minimal access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionPositionsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/rackets": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of current rackets",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionRacketsReponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/rankedwars": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get ranked wars list",
                "description": "Requires public access key. <br> When category 'all' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active ranked wars are returned.<br>When no category is chosen, this selection will return ranked war history of your own faction (if any).",
                "parameters": [
                    {
                        "name": "cat",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/FactionRankedWarsCategoryEnum"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionRankedWarResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{id}/rankedwars": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a faction's ranked wars history",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionRankedWarResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{rankedWarId}/rankedwarreport": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get ranked war details",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "name": "rankedWarId",
                        "in": "path",
                        "description": "Ranked war id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/RankedWarId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionRankedWarReportResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/revives": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's detailed revives",
                "description": "Requires limited access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RevivesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/revivesFull": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's simplified revives",
                "description": "Requires limited access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit1000"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyLimited"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RevivesFullResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/stats": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's challenges stats",
                "description": "Requires minimal access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionStatsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/territory": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of your faction's territories",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionTerritoriesReponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/{id}/territory": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of a faction's territories",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionTerritoriesReponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/territoryownership": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a list of your faction's territories",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit500Default20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionTerritoriesOwnershipResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/territorywars": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get territory wars list",
                "description": "Requires public access key. <br> When category 'finished' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active territory wars are returned.<br>When no category is chosen, this selection will return territory war history of your own faction (if any).",
                "parameters": [
                    {
                        "name": "cat",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/FactionTerritoryWarsCategoryEnum"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionTerritoryWarsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/{id}/territorywars": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a faction's territory wars history",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionTerritoryWarsHistoryResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/{territoryWarId}/territorywarreport": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get territory war details",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "name": "territoryWarId",
                        "in": "path",
                        "description": "Territory war id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/TerritoryWarId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionTerritoryWarReportResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/upgrades": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's upgrades",
                "description": "Requires minimal access key with faction API access permissions. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyMinimal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionUpgradesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/faction/wars": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get your faction's wars & pacts details",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionWarsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/{id}/wars": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get a faction's wars & pacts details",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faction id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/FactionId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionWarsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/lookup": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactionLookupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction/timestamp": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get current server time",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimestampResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/faction": {
            "get": {
                "tags": [
                    "Faction"
                ],
                "summary": "Get any Faction selection",
                "description": "Key access level depends on the required selections. <br> Choose one or more selections (comma separated).",
                "parameters": [
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "Selection names",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/FactionSelectionName"
                            }
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "selection id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Selection category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "stat",
                        "in": "query",
                        "description": "Stat category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTags"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/FactionHofResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionMembersResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionBasicResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionWarsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionNewsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RevivesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionTerritoryWarsHistoryResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionAttacksResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionBalanceResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionTerritoriesOwnershipResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionPositionsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RevivesFullResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionAttacksFullResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionApplicationsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionOngoingChainResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionChainsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionChainReportResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionCrimesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionCrimeResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionRankedWarReportResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionTerritoryWarReportResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionTerritoriesReponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionUpgradesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionStatsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionTerritoryWarsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionContributorsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionRacketsReponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionRankedWarResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FactionLookupResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TimestampResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum/categories": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get publicly available forum categories",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForumCategoriesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum/{threadId}/posts": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get specific forum thread posts",
                "description": "Requires public access key. <br>Returns 20 posts per page for a specific thread.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": "Thread id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ForumThreadId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForumPostsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum/{threadId}/thread": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get specific thread details",
                "description": "Requires public access key. <br>Contains details of a thread including topic content and poll (if any).",
                "parameters": [
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": "Thread id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ForumThreadId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForumThreadResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum/threads": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get threads across all forum categories",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForumThreadsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum/{categoryIds}/threads": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get threads for specific public forum category or categories",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "name": "categoryIds",
                        "in": "path",
                        "description": "Category id or a list of category ids (comma separated)",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForumThreadsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum/lookup": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get all available forum selections",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForumLookupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum/timestamp": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get current server time",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimestampResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/forum": {
            "get": {
                "tags": [
                    "Forum"
                ],
                "summary": "Get any Forum selection",
                "description": "Requires public access key. <br>Choose one or more selections (comma separated).",
                "parameters": [
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "Selection names",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ForumSelectionName"
                            }
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "selection id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTags"
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Selection category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ForumCategoriesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ForumThreadsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ForumThreadResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ForumPostsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ForumLookupResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TimestampResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/key/log": {
            "get": {
                "tags": [
                    "Key"
                ],
                "summary": "Get current key log history",
                "description": "Available for any key. <br>\n * This selection contains up to last 250 request logs.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyLogResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/key/info": {
            "get": {
                "tags": [
                    "Key"
                ],
                "summary": "Get current key info",
                "description": "Available for any key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KeyInfoResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/key": {
            "get": {
                "tags": [
                    "Key"
                ],
                "summary": "Get any Key selection",
                "parameters": [
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "Selection names",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/KeySelectionName"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/KeyInfoResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/KeyLogResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/market/{id}/itemmarket": {
            "get": {
                "tags": [
                    "Market"
                ],
                "summary": "Get item market listings",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Item id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ItemId"
                        }
                    },
                    {
                        "name": "bonus",
                        "in": "query",
                        "description": "Used to filter weapons with a specific bonus.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/WeaponBonusEnum"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MarketItemMarketResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/market/lookup": {
            "get": {
                "tags": [
                    "Market"
                ],
                "summary": "Get all available market selections",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MarketLookupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/market/timestamp": {
            "get": {
                "tags": [
                    "Market"
                ],
                "summary": "Get current server time",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimestampResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/market": {
            "get": {
                "tags": [
                    "Market"
                ],
                "summary": "Get any Market selection",
                "description": "Requires public access key. <br>Choose one or more selections (comma separated).",
                "parameters": [
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "Selection names",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/MarketSelectionName"
                            }
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "selection id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bonus",
                        "in": "query",
                        "description": "Used to filter weapons with a specific bonus",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/WeaponBonusEnum"
                        }
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Selection category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Direction to sort rows in",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "DESC",
                                "ASC"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/MarketItemMarketResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/MarketLookupResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TimestampResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/cars": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get cars and their racing stats",
                "description": "Requires public access key. <br>Returns the stat details about racing cars.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RacingCarsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/carupgrades": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get all possible car upgrades",
                "description": "Requires public access key. <br>Returns the details about all possible car upgrades.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RacingCarUpgradesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/races": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get races",
                "description": "Requires public access key. <br>Returns a list of races, ordered by race start timestamp.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortDesc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Category of races returned",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "custom",
                            "enum": [
                                "official",
                                "custom"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RacingRacesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/{raceId}/race": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get specific race details",
                "description": "Requires public access key. <br>Returns the details of a race.",
                "parameters": [
                    {
                        "name": "raceId",
                        "in": "path",
                        "description": "Race id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/RaceId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RacingRaceDetailsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/{trackId}/records": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get track records",
                "description": "Requires public access key. <br>Returns a list of 10 best lap records for the chosen track and car class. Results are cached globally 1 hour.",
                "parameters": [
                    {
                        "name": "trackId",
                        "in": "path",
                        "description": "Track id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/RaceTrackId"
                        }
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Car class",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/RaceClassEnum"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RacingTrackRecordsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/tracks": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get race tracks and descriptions",
                "description": "Requires public access key. <br>Returns the details about racing tracks.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RacingTracksResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/lookup": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get all available racing selections",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RacingLookupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing/timestamp": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get current server time",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimestampResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/racing": {
            "get": {
                "tags": [
                    "Racing"
                ],
                "summary": "Get any Racing selection",
                "description": "Requires public access key. <br>Choose one or more selections (comma separated).",
                "parameters": [
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "Selection names",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/RacingSelectionName"
                            }
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "selection id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Selection category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/RacingRacesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RacingTrackRecordsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RacingRaceDetailsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RacingCarsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RacingTracksResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RacingCarUpgradesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RacingLookupResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TimestampResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/attacklog": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get attack log details",
                "description": "Requires public key. <br>",
                "parameters": [
                    {
                        "name": "log",
                        "in": "query",
                        "description": "Code of the attack log. E.g. d51ad4fe6be884b309b142e2d1d4f807",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AttackCode"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTagsTrue"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttackLogResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/bounties": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get bounties",
                "description": "Requires public key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornBountiesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/calendar": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get calendar information",
                "description": "Requires public access key. <br> Get the details about competitions & events in the running year.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornCalendarResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/crimes": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get crimes information",
                "description": "Requires public access key. <br> Return the details about released crimes.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornCrimesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/education": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get education information",
                "description": "Requires public access key.<br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornEducationResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/torn/factionhof": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get faction hall of fame positions for a specific category",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Leaderboards category",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/TornFactionHofCategory"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornFactionHofResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/factiontree": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get full faction tree",
                "description": "Requires public access key. <br> ",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornFactionTreeResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/torn/hof": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get player hall of fame positions for a specific category",
                "description": "Requires public key.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiLimit100"
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Leaderboards category",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/TornHofCategory"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornHofResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/itemammo": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get information about ammo",
                "description": "Requires public key.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornItemAmmoResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/itemmods": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get information about weapon upgrades",
                "description": "Requires public key.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornItemModsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/items": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get information about items",
                "description": "Requires public key.<br>Default category is 'All'.<br>Details are not populated when requesting the category 'All'.",
                "parameters": [
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Item category type",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/TornItemCategory"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortAsc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornItemsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/{ids}/items": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get information about items",
                "description": "Requires public key.<br>Details are always populated when available.",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "Item id or a list of item ids (comma separated)",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiSortAsc"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornItemsResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/logcategories": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get available log categories",
                "description": "Requires public key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornLogCategoriesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/logtypes": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get all available log ids",
                "description": "Requires public key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornLogTypesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/{logCategoryId}/logtypes": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get available log ids for a specific log category",
                "description": "Requires public key. <br>",
                "parameters": [
                    {
                        "name": "logCategoryId",
                        "in": "path",
                        "description": "Log category id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/LogCategoryId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornLogTypesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/{crimeId}/subcrimes": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get Subcrimes information",
                "description": "Requires public access key. <br> Return the details about possible actions for a specific crime.",
                "parameters": [
                    {
                        "name": "crimeId",
                        "in": "path",
                        "description": "Crime id",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/TornCrimeId"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornSubcrimesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/territory": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get territory details",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiOffset"
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit250Default20"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornTerritoriesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/torn/{territoryIds}/territory": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get territory details",
                "description": "Requires public access key. <br>",
                "parameters": [
                    {
                        "name": "territoryIds",
                        "in": "path",
                        "description": "Territory id or a list of territory ids (comma separated)",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "$ref": "#/components/schemas/FactionTerritoryEnum"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornTerritoriesResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Unstable"
            }
        },
        "/torn/lookup": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get all available torn selections",
                "description": "Requires public key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TornLookupResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn/timestamp": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get current server time",
                "description": "Requires public key. <br>",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimestampResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        },
        "/torn": {
            "get": {
                "tags": [
                    "Torn"
                ],
                "summary": "Get any Torn selection",
                "description": "Requires public access key. <br> Choose one or more selections (comma separated).",
                "parameters": [
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "Selection names",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TornSelectionName"
                            }
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "selection id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiStripTags"
                    },
                    {
                        "$ref": "#/components/parameters/ApiLimit"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTo"
                    },
                    {
                        "$ref": "#/components/parameters/ApiFrom"
                    },
                    {
                        "$ref": "#/components/parameters/ApiSort"
                    },
                    {
                        "name": "cat",
                        "in": "query",
                        "description": "Selection category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ApiOffsetNoDefault"
                    },
                    {
                        "$ref": "#/components/parameters/ApiTimestamp"
                    },
                    {
                        "$ref": "#/components/parameters/ApiComment"
                    },
                    {
                        "$ref": "#/components/parameters/ApiKeyPublic"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/TornSubcrimesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornCrimesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornCalendarResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornHofResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornFactionHofResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornLogTypesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornItemsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornLogCategoriesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornEducationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornBountiesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornItemAmmoResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornFactionTreeResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/AttackLogResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornTerritoriesResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornTerritoriesNoLinksReponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornItemModsResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TornLookupResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/TimestampResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "x-stability": "Stable"
            }
        }
    },
    "components": {
        "schemas": {
            "RaceClassEnum": {
                "type": "string",
                "enum": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E"
                ]
            },
            "ApiKeyAccessTypeEnum": {
                "type": "string",
                "enum": [
                    "Custom",
                    "Public Only",
                    "Minimal Access",
                    "Limited Access",
                    "Full Access"
                ]
            },
            "FactionTerritoryEnum": {
                "type": "string",
                "enum": [
                    "AAB",
                    "AAC",
                    "AAD",
                    "AAE",
                    "AAF",
                    "AAG",
                    "ABA",
                    "ABB",
                    "ABC",
                    "ABD",
                    "ABE",
                    "ABF",
                    "ACA",
                    "ACB",
                    "ACC",
                    "ACD",
                    "ACE",
                    "ACF",
                    "ACG",
                    "ADA",
                    "ADB",
                    "ADC",
                    "ADD",
                    "ADE",
                    "ADF",
                    "ADG",
                    "AEA",
                    "AEB",
                    "AEC",
                    "AED",
                    "AEE",
                    "AEF",
                    "AFA",
                    "AFB",
                    "AFC",
                    "AFD",
                    "AFE",
                    "AFF",
                    "AFG",
                    "AGA",
                    "AGB",
                    "AGC",
                    "AGD",
                    "AGE",
                    "AGF",
                    "AGG",
                    "AHA",
                    "AHB",
                    "AHC",
                    "AHD",
                    "AHE",
                    "AHF",
                    "AIA",
                    "AIB",
                    "AIC",
                    "AID",
                    "AIE",
                    "AIF",
                    "AJA",
                    "AJB",
                    "AJC",
                    "AJD",
                    "AJE",
                    "AJF",
                    "AKA",
                    "AKB",
                    "AKC",
                    "AKD",
                    "AKE",
                    "AKF",
                    "ALA",
                    "ALB",
                    "ALC",
                    "ALD",
                    "ALE",
                    "ALF",
                    "AMA",
                    "AMB",
                    "AMC",
                    "AMD",
                    "AME",
                    "AMF",
                    "ANB",
                    "ANC",
                    "AND",
                    "ANE",
                    "ANF",
                    "ANG",
                    "AOB",
                    "AOC",
                    "AOD",
                    "AOE",
                    "AOF",
                    "AOG",
                    "APB",
                    "APC",
                    "APD",
                    "APE",
                    "APF",
                    "APG",
                    "AQB",
                    "AQC",
                    "AQD",
                    "AQE",
                    "AQF",
                    "AQG",
                    "ARB",
                    "ARC",
                    "ARD",
                    "ARE",
                    "ARF",
                    "ASB",
                    "ASC",
                    "ASD",
                    "ASE",
                    "ASF",
                    "ASG",
                    "ATB",
                    "ATC",
                    "ATD",
                    "ATE",
                    "ATF",
                    "ATG",
                    "AUB",
                    "AUC",
                    "AUD",
                    "AUE",
                    "AUF",
                    "AUG",
                    "AVB",
                    "AVC",
                    "AVD",
                    "AVE",
                    "AVF",
                    "AVG",
                    "AWB",
                    "AWC",
                    "AWD",
                    "AWE",
                    "AWF",
                    "AWG",
                    "AXB",
                    "AXC",
                    "AXD",
                    "AXE",
                    "AXF",
                    "AXG",
                    "AYB",
                    "AYC",
                    "AYD",
                    "AYE",
                    "AYF",
                    "AYG",
                    "AZB",
                    "AZC",
                    "AZD",
                    "AZE",
                    "AZF",
                    "AZG",
                    "BAA",
                    "BAB",
                    "BAC",
                    "BAD",
                    "BAE",
                    "BAF",
                    "BAG",
                    "BBA",
                    "BBB",
                    "BBC",
                    "BBD",
                    "BBE",
                    "BBF",
                    "BBG",
                    "BCA",
                    "BCB",
                    "BCC",
                    "BCD",
                    "BCE",
                    "BCF",
                    "BCG",
                    "BDA",
                    "BDB",
                    "BDC",
                    "BDD",
                    "BDE",
                    "BDF",
                    "BDG",
                    "BEA",
                    "BEB",
                    "BEC",
                    "BED",
                    "BEE",
                    "BEF",
                    "BFA",
                    "BFB",
                    "BFC",
                    "BFD",
                    "BFE",
                    "BFF",
                    "BFG",
                    "BGA",
                    "BGB",
                    "BGC",
                    "BGD",
                    "BGE",
                    "BGF",
                    "BGG",
                    "BHA",
                    "BHB",
                    "BHC",
                    "BHD",
                    "BHE",
                    "BHF",
                    "BIA",
                    "BIB",
                    "BIC",
                    "BID",
                    "BIE",
                    "BIF",
                    "BJA",
                    "BJB",
                    "BJC",
                    "BJD",
                    "BJE",
                    "BJF",
                    "BKA",
                    "BKB",
                    "BKC",
                    "BKD",
                    "BKE",
                    "BKF",
                    "BLA",
                    "BLB",
                    "BLC",
                    "BLD",
                    "BLE",
                    "BLF",
                    "BMA",
                    "BMB",
                    "BMC",
                    "BMD",
                    "BME",
                    "BMF",
                    "BNB",
                    "BNC",
                    "BND",
                    "BNE",
                    "BNF",
                    "BNG",
                    "BOB",
                    "BOC",
                    "BOD",
                    "BOE",
                    "BOF",
                    "BPB",
                    "BPC",
                    "BPD",
                    "BPE",
                    "BPF",
                    "BPG",
                    "BQB",
                    "BQC",
                    "BQD",
                    "BQF",
                    "BQG",
                    "BRB",
                    "BRC",
                    "BRD",
                    "BRE",
                    "BRF",
                    "BRG",
                    "BSB",
                    "BSC",
                    "BSD",
                    "BSE",
                    "BSF",
                    "BTB",
                    "BTC",
                    "BTD",
                    "BTE",
                    "BTF",
                    "BTG",
                    "BUB",
                    "BUC",
                    "BUD",
                    "BUE",
                    "BUF",
                    "BUG",
                    "BVB",
                    "BVC",
                    "BVD",
                    "BVE",
                    "BVF",
                    "BVG",
                    "BWB",
                    "BWC",
                    "BWD",
                    "BWE",
                    "BWF",
                    "BWG",
                    "BXB",
                    "BXC",
                    "BXD",
                    "BXE",
                    "BXF",
                    "BXG",
                    "BYB",
                    "BYC",
                    "BYD",
                    "BYE",
                    "BYF",
                    "BYG",
                    "BZB",
                    "BZC",
                    "BZD",
                    "BZE",
                    "BZF",
                    "BZG",
                    "CAA",
                    "CAB",
                    "CAC",
                    "CAD",
                    "CAE",
                    "CAF",
                    "CAG",
                    "CBA",
                    "CBB",
                    "CBC",
                    "CBD",
                    "CBE",
                    "CBF",
                    "CBG",
                    "CCA",
                    "CCB",
                    "CCC",
                    "CCD",
                    "CCE",
                    "CCF",
                    "CCG",
                    "CDA",
                    "CDB",
                    "CDC",
                    "CDD",
                    "CDE",
                    "CDF",
                    "CDG",
                    "CEA",
                    "CEB",
                    "CEC",
                    "CED",
                    "CEE",
                    "CEF",
                    "CFA",
                    "CFB",
                    "CFC",
                    "CFD",
                    "CFE",
                    "CFG",
                    "CGA",
                    "CGB",
                    "CGC",
                    "CGD",
                    "CGE",
                    "CGF",
                    "CGG",
                    "CHA",
                    "CHB",
                    "CHC",
                    "CHD",
                    "CHE",
                    "CHF",
                    "CIA",
                    "CIB",
                    "CIC",
                    "CID",
                    "CIE",
                    "CIF",
                    "CJA",
                    "CJB",
                    "CJC",
                    "CJD",
                    "CJE",
                    "CJF",
                    "CKA",
                    "CKB",
                    "CKC",
                    "CKD",
                    "CKE",
                    "CKF",
                    "CLA",
                    "CLB",
                    "CLC",
                    "CLD",
                    "CLE",
                    "CLF",
                    "CMA",
                    "CMB",
                    "CMC",
                    "CMD",
                    "CME",
                    "CMF",
                    "CNB",
                    "CNC",
                    "CND",
                    "CNE",
                    "CNF",
                    "CNG",
                    "COB",
                    "COC",
                    "COD",
                    "COE",
                    "COF",
                    "COG",
                    "CPB",
                    "CPC",
                    "CPD",
                    "CPE",
                    "CPF",
                    "CPG",
                    "CQB",
                    "CQC",
                    "CQD",
                    "CQF",
                    "CQG",
                    "CRB",
                    "CRC",
                    "CRD",
                    "CRE",
                    "CRF",
                    "CRG",
                    "CSB",
                    "CSC",
                    "CSD",
                    "CSE",
                    "CSF",
                    "CSG",
                    "CTB",
                    "CTC",
                    "CTD",
                    "CTE",
                    "CTF",
                    "CTG",
                    "CUB",
                    "CUC",
                    "CUD",
                    "CUE",
                    "CUF",
                    "CUG",
                    "CVB",
                    "CVC",
                    "CVD",
                    "CVE",
                    "CVF",
                    "CVG",
                    "CWB",
                    "CWC",
                    "CWD",
                    "CWE",
                    "CWF",
                    "CWG",
                    "CXB",
                    "CXC",
                    "CXD",
                    "CXE",
                    "CXF",
                    "CXG",
                    "CYB",
                    "CYC",
                    "CYD",
                    "CYE",
                    "CYF",
                    "CZB",
                    "CZC",
                    "CZD",
                    "CZE",
                    "CZF",
                    "CZG",
                    "DAA",
                    "DAB",
                    "DAC",
                    "DAD",
                    "DAE",
                    "DAF",
                    "DAG",
                    "DBA",
                    "DBB",
                    "DBC",
                    "DBD",
                    "DBE",
                    "DBF",
                    "DBG",
                    "DCA",
                    "DCB",
                    "DCC",
                    "DCD",
                    "DCE",
                    "DCF",
                    "DCG",
                    "DDA",
                    "DDB",
                    "DDC",
                    "DDD",
                    "DDE",
                    "DDF",
                    "DDG",
                    "DEA",
                    "DEB",
                    "DEC",
                    "DED",
                    "DEE",
                    "DEF",
                    "DFA",
                    "DFB",
                    "DFC",
                    "DFD",
                    "DFE",
                    "DFF",
                    "DFG",
                    "DGA",
                    "DGB",
                    "DGC",
                    "DGD",
                    "DGE",
                    "DGF",
                    "DGG",
                    "DHA",
                    "DHB",
                    "DHC",
                    "DHD",
                    "DHE",
                    "DHF",
                    "DIA",
                    "DIB",
                    "DIC",
                    "DID",
                    "DIE",
                    "DIF",
                    "DJA",
                    "DJB",
                    "DJC",
                    "DJD",
                    "DJE",
                    "DKA",
                    "DKB",
                    "DKC",
                    "DKD",
                    "DKE",
                    "DKF",
                    "DLA",
                    "DLB",
                    "DLC",
                    "DLD",
                    "DLE",
                    "DLF",
                    "DMA",
                    "DMB",
                    "DMC",
                    "DMD",
                    "DME",
                    "DMF",
                    "DNB",
                    "DNC",
                    "DND",
                    "DNE",
                    "DNF",
                    "DNG",
                    "DOB",
                    "DOC",
                    "DOD",
                    "DOE",
                    "DOF",
                    "DOG",
                    "DPB",
                    "DPC",
                    "DPD",
                    "DPE",
                    "DPF",
                    "DPG",
                    "DQB",
                    "DQC",
                    "DQD",
                    "DQF",
                    "DQG",
                    "DRB",
                    "DRC",
                    "DRD",
                    "DRE",
                    "DRF",
                    "DRG",
                    "DSB",
                    "DSC",
                    "DSD",
                    "DSE",
                    "DSF",
                    "DSG",
                    "DTB",
                    "DTC",
                    "DTD",
                    "DTE",
                    "DTF",
                    "DTG",
                    "DUB",
                    "DUC",
                    "DUD",
                    "DUE",
                    "DUF",
                    "DUG",
                    "DVB",
                    "DVC",
                    "DVD",
                    "DVE",
                    "DVF",
                    "DVG",
                    "DWB",
                    "DWC",
                    "DWD",
                    "DWE",
                    "DWF",
                    "DWG",
                    "DXB",
                    "DXC",
                    "DXD",
                    "DXE",
                    "DXF",
                    "DXG",
                    "DYB",
                    "DYC",
                    "DYD",
                    "DYE",
                    "DYF",
                    "DYG",
                    "DZB",
                    "DZC",
                    "DZD",
                    "DZE",
                    "DZF",
                    "DZG",
                    "EAA",
                    "EAB",
                    "EAC",
                    "EAD",
                    "EAE",
                    "EAF",
                    "EAG",
                    "EBA",
                    "EBB",
                    "EBC",
                    "EBD",
                    "EBE",
                    "EBF",
                    "EBG",
                    "ECA",
                    "ECB",
                    "ECC",
                    "ECD",
                    "ECE",
                    "ECF",
                    "ECG",
                    "EDA",
                    "EDB",
                    "EDC",
                    "EDD",
                    "EDE",
                    "EDF",
                    "EDG",
                    "EEA",
                    "EEB",
                    "EEC",
                    "EED",
                    "EEE",
                    "EEF",
                    "EFA",
                    "EFB",
                    "EFC",
                    "EFD",
                    "EFE",
                    "EFF",
                    "EFG",
                    "EGA",
                    "EGB",
                    "EGC",
                    "EGD",
                    "EGE",
                    "EGF",
                    "EHA",
                    "EHB",
                    "EHC",
                    "EHD",
                    "EHE",
                    "EHF",
                    "EIA",
                    "EIB",
                    "EIC",
                    "EID",
                    "EIE",
                    "EIF",
                    "EJA",
                    "EJB",
                    "EJC",
                    "EJD",
                    "EJE",
                    "EKA",
                    "EKB",
                    "EKC",
                    "EKD",
                    "EKE",
                    "EKF",
                    "ELA",
                    "ELB",
                    "ELC",
                    "ELD",
                    "ELE",
                    "ELF",
                    "EMA",
                    "EMB",
                    "EMC",
                    "EMD",
                    "EME",
                    "EMF",
                    "ENB",
                    "ENC",
                    "END",
                    "ENE",
                    "ENF",
                    "ENG",
                    "EOB",
                    "EOC",
                    "EOD",
                    "EOE",
                    "EOF",
                    "EPB",
                    "EPC",
                    "EPD",
                    "EPE",
                    "EPF",
                    "EPG",
                    "EQB",
                    "EQC",
                    "EQD",
                    "EQF",
                    "EQG",
                    "ERB",
                    "ERC",
                    "ERD",
                    "ERE",
                    "ERF",
                    "ERG",
                    "ESB",
                    "ESC",
                    "ESD",
                    "ESE",
                    "ESF",
                    "ESG",
                    "ETB",
                    "ETC",
                    "ETD",
                    "ETE",
                    "ETF",
                    "ETG",
                    "EUB",
                    "EUC",
                    "EUD",
                    "EUE",
                    "EUF",
                    "EUG",
                    "EVB",
                    "EVC",
                    "EVD",
                    "EVE",
                    "EVF",
                    "EVG",
                    "EWB",
                    "EWC",
                    "EWD",
                    "EWE",
                    "EWF",
                    "EWG",
                    "EXB",
                    "EXC",
                    "EXD",
                    "EXE",
                    "EXF",
                    "EXG",
                    "EYB",
                    "EYC",
                    "EYD",
                    "EYE",
                    "EYF",
                    "EYG",
                    "EZB",
                    "EZC",
                    "EZD",
                    "EZE",
                    "EZF",
                    "EZG",
                    "FAA",
                    "FAB",
                    "FAC",
                    "FAD",
                    "FAE",
                    "FAF",
                    "FAG",
                    "FBA",
                    "FBB",
                    "FBC",
                    "FBD",
                    "FBF",
                    "FBG",
                    "FCA",
                    "FCB",
                    "FCC",
                    "FCD",
                    "FCE",
                    "FCF",
                    "FCG",
                    "FDA",
                    "FDB",
                    "FDC",
                    "FDD",
                    "FDE",
                    "FDF",
                    "FDG",
                    "FEA",
                    "FEB",
                    "FEC",
                    "FED",
                    "FEE",
                    "FEF",
                    "FFA",
                    "FFB",
                    "FFC",
                    "FFD",
                    "FFE",
                    "FFF",
                    "FFG",
                    "FGA",
                    "FGB",
                    "FGC",
                    "FGD",
                    "FGE",
                    "FGF",
                    "FGG",
                    "FHA",
                    "FHB",
                    "FHC",
                    "FHD",
                    "FHE",
                    "FHF",
                    "FIA",
                    "FIB",
                    "FIC",
                    "FID",
                    "FIE",
                    "FIF",
                    "FJA",
                    "FJB",
                    "FJC",
                    "FJD",
                    "FJE",
                    "FJF",
                    "FKA",
                    "FKB",
                    "FKC",
                    "FKD",
                    "FKE",
                    "FKF",
                    "FLA",
                    "FLB",
                    "FLC",
                    "FLD",
                    "FLE",
                    "FLF",
                    "FMA",
                    "FMC",
                    "FMD",
                    "FME",
                    "FMF",
                    "FNB",
                    "FNC",
                    "FND",
                    "FNE",
                    "FNF",
                    "FNG",
                    "FOB",
                    "FOC",
                    "FOD",
                    "FOE",
                    "FOF",
                    "FPB",
                    "FPC",
                    "FPD",
                    "FPE",
                    "FPF",
                    "FPG",
                    "FQB",
                    "FQC",
                    "FQD",
                    "FQF",
                    "FQG",
                    "FRB",
                    "FRC",
                    "FRD",
                    "FRE",
                    "FRF",
                    "FRG",
                    "FSB",
                    "FSC",
                    "FSD",
                    "FSE",
                    "FSF",
                    "FSG",
                    "FTB",
                    "FTC",
                    "FTD",
                    "FTE",
                    "FTF",
                    "FTG",
                    "FUB",
                    "FUC",
                    "FUD",
                    "FUE",
                    "FUF",
                    "FUG",
                    "FVB",
                    "FVC",
                    "FVD",
                    "FVE",
                    "FVF",
                    "FVG",
                    "FWB",
                    "FWC",
                    "FWD",
                    "FWE",
                    "FWF",
                    "FWG",
                    "FXB",
                    "FXC",
                    "FXD",
                    "FXE",
                    "FXF",
                    "FXG",
                    "FYB",
                    "FYC",
                    "FYD",
                    "FYE",
                    "FYF",
                    "FYG",
                    "FZB",
                    "FZC",
                    "FZD",
                    "FZE",
                    "FZF",
                    "FZG",
                    "GAA",
                    "GAB",
                    "GAC",
                    "GAD",
                    "GAE",
                    "GAF",
                    "GAG",
                    "GBA",
                    "GBB",
                    "GBC",
                    "GBD",
                    "GBE",
                    "GBF",
                    "GCA",
                    "GCB",
                    "GCC",
                    "GCD",
                    "GCE",
                    "GCF",
                    "GCG",
                    "GDA",
                    "GDB",
                    "GDC",
                    "GDD",
                    "GDE",
                    "GDF",
                    "GDG",
                    "GEA",
                    "GEB",
                    "GEC",
                    "GED",
                    "GEE",
                    "GEF",
                    "GFA",
                    "GFB",
                    "GFC",
                    "GFD",
                    "GFE",
                    "GFF",
                    "GFG",
                    "GGA",
                    "GGB",
                    "GGC",
                    "GGD",
                    "GGE",
                    "GGF",
                    "GHA",
                    "GHB",
                    "GHC",
                    "GHD",
                    "GHE",
                    "GHF",
                    "GIA",
                    "GIB",
                    "GIC",
                    "GID",
                    "GIE",
                    "GJA",
                    "GJB",
                    "GJC",
                    "GJD",
                    "GJE",
                    "GJF",
                    "GKA",
                    "GKB",
                    "GKC",
                    "GKD",
                    "GKE",
                    "GKF",
                    "GLA",
                    "GLB",
                    "GLC",
                    "GLD",
                    "GLE",
                    "GLF",
                    "GMA",
                    "GMC",
                    "GMD",
                    "GME",
                    "GMF",
                    "GNB",
                    "GNC",
                    "GND",
                    "GNE",
                    "GNF",
                    "GNG",
                    "GOB",
                    "GOC",
                    "GOD",
                    "GOE",
                    "GOF",
                    "GPB",
                    "GPC",
                    "GPD",
                    "GPE",
                    "GPF",
                    "GPG",
                    "GQC",
                    "GQD",
                    "GQF",
                    "GQG",
                    "GRB",
                    "GRC",
                    "GRD",
                    "GRE",
                    "GRF",
                    "GRG",
                    "GSB",
                    "GSC",
                    "GSD",
                    "GSE",
                    "GSF",
                    "GSG",
                    "GTB",
                    "GTC",
                    "GTD",
                    "GTE",
                    "GTF",
                    "GTG",
                    "GUB",
                    "GUC",
                    "GUD",
                    "GUF",
                    "GUG",
                    "GVB",
                    "GVC",
                    "GVD",
                    "GVE",
                    "GVF",
                    "GVG",
                    "GWB",
                    "GWC",
                    "GWD",
                    "GWE",
                    "GWF",
                    "GWG",
                    "GXB",
                    "GXC",
                    "GXD",
                    "GXE",
                    "GXF",
                    "GXG",
                    "GYB",
                    "GYC",
                    "GYD",
                    "GYE",
                    "GYF",
                    "GYG",
                    "GZB",
                    "GZC",
                    "GZD",
                    "GZE",
                    "GZF",
                    "GZG",
                    "HAA",
                    "HAB",
                    "HAC",
                    "HAD",
                    "HAE",
                    "HAF",
                    "HAG",
                    "HBA",
                    "HBB",
                    "HBC",
                    "HBD",
                    "HBE",
                    "HBF",
                    "HCA",
                    "HCB",
                    "HCC",
                    "HCD",
                    "HCE",
                    "HCF",
                    "HCG",
                    "HDA",
                    "HDB",
                    "HDC",
                    "HDD",
                    "HDE",
                    "HDF",
                    "HDG",
                    "HEA",
                    "HEB",
                    "HEC",
                    "HED",
                    "HEE",
                    "HEF",
                    "HFA",
                    "HFB",
                    "HFC",
                    "HFD",
                    "HFE",
                    "HFF",
                    "HGA",
                    "HGB",
                    "HGC",
                    "HGD",
                    "HGE",
                    "HGF",
                    "HHA",
                    "HHB",
                    "HHC",
                    "HHD",
                    "HHE",
                    "HHF",
                    "HIA",
                    "HIB",
                    "HIC",
                    "HID",
                    "HIE",
                    "HJA",
                    "HJB",
                    "HJC",
                    "HJD",
                    "HJE",
                    "HJF",
                    "HKA",
                    "HKB",
                    "HKC",
                    "HKD",
                    "HKE",
                    "HKF",
                    "HLA",
                    "HLB",
                    "HLC",
                    "HLD",
                    "HLE",
                    "HLF",
                    "HMA",
                    "HMC",
                    "HMD",
                    "HME",
                    "HMF",
                    "HNB",
                    "HNC",
                    "HND",
                    "HNE",
                    "HNF",
                    "HNG",
                    "HOB",
                    "HOC",
                    "HOD",
                    "HOE",
                    "HOF",
                    "HPB",
                    "HPC",
                    "HPD",
                    "HPE",
                    "HPF",
                    "HPG",
                    "HQB",
                    "HQC",
                    "HQD",
                    "HQF",
                    "HQG",
                    "HRB",
                    "HRC",
                    "HRD",
                    "HRE",
                    "HRF",
                    "HRG",
                    "HSB",
                    "HSC",
                    "HSD",
                    "HSE",
                    "HSF",
                    "HSG",
                    "HTB",
                    "HTC",
                    "HTD",
                    "HTE",
                    "HTF",
                    "HTG",
                    "HUB",
                    "HUC",
                    "HUD",
                    "HUE",
                    "HUF",
                    "HUG",
                    "HVB",
                    "HVC",
                    "HVD",
                    "HVE",
                    "HVF",
                    "HVG",
                    "HWB",
                    "HWC",
                    "HWD",
                    "HWE",
                    "HWF",
                    "HWG",
                    "HXB",
                    "HXC",
                    "HXD",
                    "HXE",
                    "HXF",
                    "HXG",
                    "HYB",
                    "HYC",
                    "HYD",
                    "HYE",
                    "HYF",
                    "HYG",
                    "HZB",
                    "HZC",
                    "HZD",
                    "HZE",
                    "HZF",
                    "HZG",
                    "IAA",
                    "IAB",
                    "IAC",
                    "IAD",
                    "IAE",
                    "IAF",
                    "IAG",
                    "IBA",
                    "IBB",
                    "IBC",
                    "IBD",
                    "IBE",
                    "IBF",
                    "ICA",
                    "ICB",
                    "ICC",
                    "ICD",
                    "ICE",
                    "ICF",
                    "ICG",
                    "IDA",
                    "IDB",
                    "IDC",
                    "IDD",
                    "IDE",
                    "IDF",
                    "IDG",
                    "IEA",
                    "IEB",
                    "IEC",
                    "IED",
                    "IEE",
                    "IEF",
                    "IFA",
                    "IFB",
                    "IFC",
                    "IFD",
                    "IFE",
                    "IFF",
                    "IFG",
                    "IGA",
                    "IGB",
                    "IGC",
                    "IGD",
                    "IGE",
                    "IGF",
                    "IGG",
                    "IHA",
                    "IHB",
                    "IHC",
                    "IHD",
                    "IHE",
                    "IHF",
                    "IIA",
                    "IIB",
                    "IIC",
                    "IID",
                    "IIE",
                    "IJA",
                    "IJB",
                    "IJC",
                    "IJD",
                    "IJE",
                    "IJF",
                    "IKA",
                    "IKB",
                    "IKC",
                    "IKD",
                    "IKE",
                    "IKF",
                    "ILA",
                    "ILB",
                    "ILC",
                    "ILD",
                    "ILE",
                    "ILF",
                    "IMA",
                    "IMB",
                    "IMC",
                    "IMD",
                    "IME",
                    "IMF",
                    "INB",
                    "INC",
                    "IND",
                    "INE",
                    "INF",
                    "ING",
                    "IOB",
                    "IOC",
                    "IOD",
                    "IOE",
                    "IOF",
                    "IPB",
                    "IPC",
                    "IPD",
                    "IPE",
                    "IPF",
                    "IPG",
                    "IQB",
                    "IQC",
                    "IQD",
                    "IQF",
                    "IQG",
                    "IRB",
                    "IRC",
                    "IRD",
                    "IRE",
                    "IRF",
                    "IRG",
                    "ISB",
                    "ISC",
                    "ISD",
                    "ISE",
                    "ISF",
                    "ISG",
                    "ITB",
                    "ITC",
                    "ITD",
                    "ITE",
                    "ITF",
                    "ITG",
                    "IUB",
                    "IUC",
                    "IUD",
                    "IUE",
                    "IUF",
                    "IUG",
                    "IVB",
                    "IVC",
                    "IVD",
                    "IVE",
                    "IVF",
                    "IVG",
                    "IWB",
                    "IWC",
                    "IWD",
                    "IWE",
                    "IWF",
                    "IWG",
                    "IXB",
                    "IXC",
                    "IXD",
                    "IXE",
                    "IXF",
                    "IXG",
                    "IYB",
                    "IYC",
                    "IYD",
                    "IYE",
                    "IYF",
                    "IYG",
                    "IZB",
                    "IZC",
                    "IZD",
                    "IZE",
                    "IZF",
                    "IZG",
                    "JAA",
                    "JAB",
                    "JAC",
                    "JAD",
                    "JAE",
                    "JAF",
                    "JAG",
                    "JBA",
                    "JBB",
                    "JBC",
                    "JBD",
                    "JBE",
                    "JBF",
                    "JCA",
                    "JCB",
                    "JCC",
                    "JCD",
                    "JCE",
                    "JCF",
                    "JCG",
                    "JDA",
                    "JDB",
                    "JDC",
                    "JDD",
                    "JDE",
                    "JDF",
                    "JDG",
                    "JEA",
                    "JEB",
                    "JEC",
                    "JED",
                    "JEE",
                    "JEF",
                    "JFA",
                    "JFB",
                    "JFC",
                    "JFD",
                    "JFE",
                    "JFF",
                    "JFG",
                    "JGA",
                    "JGB",
                    "JGC",
                    "JGD",
                    "JGE",
                    "JGF",
                    "JHA",
                    "JHB",
                    "JHC",
                    "JHD",
                    "JHE",
                    "JHF",
                    "JIA",
                    "JIB",
                    "JIC",
                    "JID",
                    "JIE",
                    "JIF",
                    "JJA",
                    "JJB",
                    "JJC",
                    "JJD",
                    "JJE",
                    "JJF",
                    "JKA",
                    "JKB",
                    "JKC",
                    "JKD",
                    "JKE",
                    "JKF",
                    "JLA",
                    "JLB",
                    "JLC",
                    "JLD",
                    "JLE",
                    "JLF",
                    "JMA",
                    "JMC",
                    "JMD",
                    "JME",
                    "JMF",
                    "JNB",
                    "JNC",
                    "JND",
                    "JNE",
                    "JNF",
                    "JNG",
                    "JOB",
                    "JOC",
                    "JOD",
                    "JOE",
                    "JOF",
                    "JPB",
                    "JPC",
                    "JPD",
                    "JPE",
                    "JPF",
                    "JPG",
                    "JQB",
                    "JQC",
                    "JQD",
                    "JQF",
                    "JQG",
                    "JRB",
                    "JRC",
                    "JRD",
                    "JRE",
                    "JRF",
                    "JRG",
                    "JSB",
                    "JSC",
                    "JSD",
                    "JSE",
                    "JSF",
                    "JSG",
                    "JTB",
                    "JTC",
                    "JTD",
                    "JTE",
                    "JTF",
                    "JTG",
                    "JUB",
                    "JUC",
                    "JUD",
                    "JUE",
                    "JUF",
                    "JUG",
                    "JVB",
                    "JVC",
                    "JVD",
                    "JVE",
                    "JVF",
                    "JVG",
                    "JWB",
                    "JWC",
                    "JWD",
                    "JWE",
                    "JWF",
                    "JWG",
                    "JXB",
                    "JXC",
                    "JXD",
                    "JXE",
                    "JXF",
                    "JXG",
                    "JYB",
                    "JYC",
                    "JYD",
                    "JYE",
                    "JYF",
                    "JYG",
                    "JZB",
                    "JZC",
                    "JZD",
                    "JZE",
                    "JZF",
                    "JZG",
                    "KAA",
                    "KAB",
                    "KAC",
                    "KAD",
                    "KAE",
                    "KAF",
                    "KAG",
                    "KBA",
                    "KBB",
                    "KBC",
                    "KBD",
                    "KBE",
                    "KBF",
                    "KBG",
                    "KCA",
                    "KCB",
                    "KCC",
                    "KCD",
                    "KCE",
                    "KCF",
                    "KCG",
                    "KDA",
                    "KDB",
                    "KDC",
                    "KDD",
                    "KDE",
                    "KEA",
                    "KEB",
                    "KEC",
                    "KED",
                    "KEE",
                    "KEF",
                    "KFA",
                    "KFB",
                    "KFC",
                    "KFD",
                    "KFE",
                    "KFF",
                    "KFG",
                    "KGA",
                    "KGB",
                    "KGC",
                    "KGD",
                    "KGE",
                    "KGF",
                    "KGG",
                    "KHA",
                    "KHB",
                    "KHC",
                    "KHD",
                    "KHE",
                    "KHF",
                    "KIA",
                    "KIB",
                    "KIC",
                    "KID",
                    "KIE",
                    "KIF",
                    "KJA",
                    "KJB",
                    "KJC",
                    "KJD",
                    "KJE",
                    "KJF",
                    "KKA",
                    "KKB",
                    "KKC",
                    "KKD",
                    "KKE",
                    "KKF",
                    "KLA",
                    "KLB",
                    "KLC",
                    "KLD",
                    "KLE",
                    "KLF",
                    "KMA",
                    "KMC",
                    "KMD",
                    "KME",
                    "KMF",
                    "KNB",
                    "KNC",
                    "KND",
                    "KNE",
                    "KNF",
                    "KNG",
                    "KOB",
                    "KOC",
                    "KOD",
                    "KOE",
                    "KOF",
                    "KPB",
                    "KPC",
                    "KPD",
                    "KPE",
                    "KPF",
                    "KPG",
                    "KQB",
                    "KQC",
                    "KQD",
                    "KQE",
                    "KQF",
                    "KQG",
                    "KRB",
                    "KRC",
                    "KRD",
                    "KRE",
                    "KRF",
                    "KRG",
                    "KSB",
                    "KSC",
                    "KSD",
                    "KSE",
                    "KSF",
                    "KSG",
                    "KTB",
                    "KTC",
                    "KTD",
                    "KTE",
                    "KTF",
                    "KTG",
                    "KUB",
                    "KUC",
                    "KUD",
                    "KUE",
                    "KUF",
                    "KUG",
                    "KVB",
                    "KVC",
                    "KVD",
                    "KVE",
                    "KVF",
                    "KVG",
                    "KWB",
                    "KWC",
                    "KWD",
                    "KWE",
                    "KWF",
                    "KWG",
                    "KXB",
                    "KXC",
                    "KXD",
                    "KXE",
                    "KXF",
                    "KXG",
                    "KYB",
                    "KYC",
                    "KYD",
                    "KYE",
                    "KYF",
                    "KYG",
                    "KZB",
                    "KZC",
                    "KZD",
                    "KZE",
                    "KZF",
                    "KZG",
                    "LAA",
                    "LAB",
                    "LAC",
                    "LAD",
                    "LAE",
                    "LAF",
                    "LAG",
                    "LBA",
                    "LBB",
                    "LBC",
                    "LBD",
                    "LBE",
                    "LBF",
                    "LBG",
                    "LCA",
                    "LCB",
                    "LCC",
                    "LCD",
                    "LCE",
                    "LCF",
                    "LCG",
                    "LDA",
                    "LDB",
                    "LDC",
                    "LDD",
                    "LDE",
                    "LDF",
                    "LEA",
                    "LEB",
                    "LEC",
                    "LED",
                    "LEE",
                    "LEF",
                    "LFA",
                    "LFB",
                    "LFC",
                    "LFD",
                    "LFE",
                    "LFF",
                    "LFG",
                    "LGA",
                    "LGB",
                    "LGC",
                    "LGD",
                    "LGE",
                    "LGF",
                    "LGG",
                    "LHA",
                    "LHB",
                    "LHC",
                    "LHD",
                    "LHE",
                    "LHF",
                    "LIA",
                    "LIB",
                    "LIC",
                    "LID",
                    "LIE",
                    "LIF",
                    "LJA",
                    "LJB",
                    "LJC",
                    "LJD",
                    "LJE",
                    "LJF",
                    "LKA",
                    "LKB",
                    "LKC",
                    "LKD",
                    "LKE",
                    "LKF",
                    "LLA",
                    "LLB",
                    "LLC",
                    "LLD",
                    "LLE",
                    "LLF",
                    "LMA",
                    "LMC",
                    "LMD",
                    "LME",
                    "LMF",
                    "LNB",
                    "LNC",
                    "LND",
                    "LNE",
                    "LNF",
                    "LNG",
                    "LOB",
                    "LOC",
                    "LOD",
                    "LOE",
                    "LOF",
                    "LPB",
                    "LPC",
                    "LPD",
                    "LPE",
                    "LPF",
                    "LPG",
                    "LQB",
                    "LQC",
                    "LQD",
                    "LQE",
                    "LQF",
                    "LQG",
                    "LRB",
                    "LRC",
                    "LRD",
                    "LRE",
                    "LRF",
                    "LRG",
                    "LSB",
                    "LSC",
                    "LSD",
                    "LSE",
                    "LSF",
                    "LSG",
                    "LTB",
                    "LTC",
                    "LTD",
                    "LTE",
                    "LTF",
                    "LTG",
                    "LUB",
                    "LUC",
                    "LUD",
                    "LUE",
                    "LUF",
                    "LUG",
                    "LVB",
                    "LVC",
                    "LVD",
                    "LVE",
                    "LVF",
                    "LVG",
                    "LWB",
                    "LWC",
                    "LWD",
                    "LWE",
                    "LWF",
                    "LWG",
                    "LXB",
                    "LXC",
                    "LXD",
                    "LXE",
                    "LXF",
                    "LXG",
                    "LYB",
                    "LYC",
                    "LYD",
                    "LYE",
                    "LYF",
                    "LYG",
                    "LZB",
                    "LZC",
                    "LZD",
                    "LZE",
                    "LZF",
                    "LZG",
                    "MAA",
                    "MAB",
                    "MAC",
                    "MAD",
                    "MAE",
                    "MAF",
                    "MAG",
                    "MBA",
                    "MBB",
                    "MBC",
                    "MBD",
                    "MBE",
                    "MBF",
                    "MBG",
                    "MCA",
                    "MCB",
                    "MCC",
                    "MCD",
                    "MCE",
                    "MCF",
                    "MCG",
                    "MDA",
                    "MDB",
                    "MDC",
                    "MDD",
                    "MDE",
                    "MDF",
                    "MDG",
                    "MEA",
                    "MEB",
                    "MEC",
                    "MED",
                    "MEE",
                    "MEF",
                    "MEG",
                    "MFA",
                    "MFB",
                    "MFC",
                    "MFD",
                    "MFE",
                    "MFF",
                    "MFG",
                    "MGA",
                    "MGB",
                    "MGC",
                    "MGD",
                    "MGE",
                    "MGF",
                    "MGG",
                    "MHA",
                    "MHB",
                    "MHC",
                    "MHD",
                    "MHE",
                    "MHF",
                    "MIA",
                    "MIB",
                    "MIC",
                    "MID",
                    "MIE",
                    "MIF",
                    "MJA",
                    "MJB",
                    "MJC",
                    "MJD",
                    "MJE",
                    "MKA",
                    "MKB",
                    "MKC",
                    "MKD",
                    "MKE",
                    "MKF",
                    "MLA",
                    "MLB",
                    "MLC",
                    "MLD",
                    "MLE",
                    "MLF",
                    "MMA",
                    "MMC",
                    "MMD",
                    "MME",
                    "MMF",
                    "MNB",
                    "MNC",
                    "MND",
                    "MNE",
                    "MNF",
                    "MNG",
                    "MOB",
                    "MOC",
                    "MOD",
                    "MOE",
                    "MOF",
                    "MPB",
                    "MPC",
                    "MPD",
                    "MPE",
                    "MPF",
                    "MPG",
                    "MQB",
                    "MQC",
                    "MQD",
                    "MQE",
                    "MQF",
                    "MQG",
                    "MRB",
                    "MRC",
                    "MRD",
                    "MRE",
                    "MRF",
                    "MRG",
                    "MSB",
                    "MSC",
                    "MSD",
                    "MSE",
                    "MSF",
                    "MSG",
                    "MTB",
                    "MTC",
                    "MTD",
                    "MTE",
                    "MTF",
                    "MTG",
                    "MUB",
                    "MUC",
                    "MUD",
                    "MUE",
                    "MUF",
                    "MUG",
                    "MVB",
                    "MVC",
                    "MVD",
                    "MVE",
                    "MVF",
                    "MVG",
                    "MWB",
                    "MWC",
                    "MWD",
                    "MWE",
                    "MWF",
                    "MWG",
                    "MXB",
                    "MXC",
                    "MXD",
                    "MXE",
                    "MXF",
                    "MXG",
                    "MYB",
                    "MYC",
                    "MYD",
                    "MYE",
                    "MYF",
                    "MYG",
                    "MZB",
                    "MZC",
                    "MZD",
                    "MZE",
                    "MZF",
                    "MZG",
                    "NAB",
                    "NAC",
                    "NAD",
                    "NAE",
                    "NAF",
                    "NAG",
                    "NBA",
                    "NBB",
                    "NBC",
                    "NBD",
                    "NBE",
                    "NBF",
                    "NBG",
                    "NCA",
                    "NCB",
                    "NCC",
                    "NCD",
                    "NCE",
                    "NCF",
                    "NCG",
                    "NDA",
                    "NDB",
                    "NDC",
                    "NDD",
                    "NDE",
                    "NDF",
                    "NDG",
                    "NEA",
                    "NEB",
                    "NEC",
                    "NED",
                    "NEE",
                    "NEF",
                    "NEG",
                    "NFA",
                    "NFB",
                    "NFC",
                    "NFD",
                    "NFE",
                    "NFF",
                    "NFG",
                    "NGA",
                    "NGB",
                    "NGC",
                    "NGD",
                    "NGE",
                    "NGF",
                    "NGG",
                    "NHA",
                    "NHB",
                    "NHC",
                    "NHD",
                    "NHE",
                    "NHF",
                    "NIA",
                    "NIB",
                    "NIC",
                    "NID",
                    "NIE",
                    "NIF",
                    "NJA",
                    "NJB",
                    "NJC",
                    "NJD",
                    "NJE",
                    "NJF",
                    "NKA",
                    "NKB",
                    "NKC",
                    "NKD",
                    "NKE",
                    "NKF",
                    "NLA",
                    "NLB",
                    "NLC",
                    "NLD",
                    "NLE",
                    "NLF",
                    "NMA",
                    "NMB",
                    "NMC",
                    "NMD",
                    "NME",
                    "NMF",
                    "NNB",
                    "NND",
                    "NNE",
                    "NNF",
                    "NNG",
                    "NOB",
                    "NOC",
                    "NOD",
                    "NOE",
                    "NOF",
                    "NOG",
                    "NPB",
                    "NPC",
                    "NPD",
                    "NPE",
                    "NPF",
                    "NQB",
                    "NQC",
                    "NQD",
                    "NQE",
                    "NQF",
                    "NQG",
                    "NRB",
                    "NRC",
                    "NRD",
                    "NRE",
                    "NRF",
                    "NRG",
                    "NSB",
                    "NSC",
                    "NSD",
                    "NSE",
                    "NSF",
                    "NSG",
                    "NTB",
                    "NTC",
                    "NTD",
                    "NTE",
                    "NTF",
                    "NTG",
                    "NUB",
                    "NUC",
                    "NUD",
                    "NUE",
                    "NUF",
                    "NUG",
                    "NVB",
                    "NVC",
                    "NVD",
                    "NVE",
                    "NVF",
                    "NVG",
                    "NWB",
                    "NWC",
                    "NWD",
                    "NWE",
                    "NWF",
                    "NWG",
                    "NXB",
                    "NXC",
                    "NXD",
                    "NXE",
                    "NXF",
                    "NXG",
                    "NYB",
                    "NYC",
                    "NYD",
                    "NYE",
                    "NYF",
                    "NYG",
                    "NZB",
                    "NZC",
                    "NZD",
                    "NZE",
                    "NZF",
                    "NZG",
                    "OAB",
                    "OAC",
                    "OAD",
                    "OAE",
                    "OAF",
                    "OAG",
                    "OBA",
                    "OBB",
                    "OBC",
                    "OBD",
                    "OBE",
                    "OBF",
                    "OCA",
                    "OCB",
                    "OCC",
                    "OCD",
                    "OCE",
                    "OCF",
                    "OCG",
                    "ODA",
                    "ODB",
                    "ODC",
                    "ODD",
                    "ODE",
                    "ODF",
                    "ODG",
                    "OEA",
                    "OEB",
                    "OEC",
                    "OED",
                    "OEE",
                    "OEF",
                    "OFA",
                    "OFB",
                    "OFC",
                    "OFD",
                    "OFE",
                    "OFF",
                    "OFG",
                    "OGA",
                    "OGB",
                    "OGC",
                    "OGD",
                    "OGE",
                    "OGF",
                    "OGG",
                    "OHA",
                    "OHB",
                    "OHC",
                    "OHD",
                    "OHE",
                    "OHF",
                    "OIA",
                    "OIB",
                    "OIC",
                    "OID",
                    "OIE",
                    "OIF",
                    "OJA",
                    "OJB",
                    "OJC",
                    "OJD",
                    "OJE",
                    "OJF",
                    "OKA",
                    "OKB",
                    "OKC",
                    "OKD",
                    "OKE",
                    "OKF",
                    "OLA",
                    "OLB",
                    "OLC",
                    "OLD",
                    "OLE",
                    "OLF",
                    "OMA",
                    "OMB",
                    "OMC",
                    "OMD",
                    "OME",
                    "OMF",
                    "ONB",
                    "OND",
                    "ONE",
                    "ONF",
                    "ONG",
                    "OOB",
                    "OOC",
                    "OOD",
                    "OOE",
                    "OOF",
                    "OOG",
                    "OPB",
                    "OPC",
                    "OPD",
                    "OPE",
                    "OPF",
                    "OQB",
                    "OQC",
                    "OQD",
                    "OQE",
                    "OQF",
                    "OQG",
                    "ORB",
                    "ORC",
                    "ORD",
                    "ORE",
                    "ORF",
                    "ORG",
                    "OSB",
                    "OSC",
                    "OSD",
                    "OSE",
                    "OSF",
                    "OTB",
                    "OTC",
                    "OTD",
                    "OTE",
                    "OTG",
                    "OUB",
                    "OUC",
                    "OUD",
                    "OUE",
                    "OUF",
                    "OUG",
                    "OVB",
                    "OVC",
                    "OVD",
                    "OVE",
                    "OVF",
                    "OVG",
                    "OWB",
                    "OWC",
                    "OWD",
                    "OWE",
                    "OWF",
                    "OWG",
                    "OXB",
                    "OXC",
                    "OXD",
                    "OXE",
                    "OXF",
                    "OXG",
                    "OYB",
                    "OYC",
                    "OYD",
                    "OYE",
                    "OYF",
                    "OYG",
                    "OZB",
                    "OZC",
                    "OZD",
                    "OZE",
                    "OZF",
                    "OZG",
                    "PAB",
                    "PAC",
                    "PAD",
                    "PAE",
                    "PAF",
                    "PAG",
                    "PBA",
                    "PBB",
                    "PBC",
                    "PBD",
                    "PBE",
                    "PBF",
                    "PCA",
                    "PCB",
                    "PCC",
                    "PCD",
                    "PCE",
                    "PCF",
                    "PCG",
                    "PDA",
                    "PDB",
                    "PDC",
                    "PDD",
                    "PDE",
                    "PDF",
                    "PDG",
                    "PEA",
                    "PEB",
                    "PEC",
                    "PED",
                    "PEE",
                    "PEF",
                    "PFA",
                    "PFB",
                    "PFC",
                    "PFD",
                    "PFE",
                    "PFF",
                    "PFG",
                    "PGA",
                    "PGB",
                    "PGC",
                    "PGD",
                    "PGE",
                    "PGF",
                    "PGG",
                    "PHA",
                    "PHB",
                    "PHC",
                    "PHD",
                    "PHE",
                    "PHF",
                    "PIA",
                    "PIB",
                    "PIC",
                    "PID",
                    "PIE",
                    "PIF",
                    "PJA",
                    "PJB",
                    "PJC",
                    "PJD",
                    "PJE",
                    "PJF",
                    "PKA",
                    "PKB",
                    "PKC",
                    "PKD",
                    "PKE",
                    "PKF",
                    "PLA",
                    "PLB",
                    "PLC",
                    "PLD",
                    "PLE",
                    "PLF",
                    "PMA",
                    "PMB",
                    "PMC",
                    "PMD",
                    "PME",
                    "PMF",
                    "PNB",
                    "PND",
                    "PNE",
                    "PNF",
                    "PNG",
                    "POB",
                    "POC",
                    "POD",
                    "POE",
                    "POF",
                    "POG",
                    "PPB",
                    "PPC",
                    "PPD",
                    "PPE",
                    "PPF",
                    "PQB",
                    "PQC",
                    "PQD",
                    "PQE",
                    "PQF",
                    "PQG",
                    "PRB",
                    "PRC",
                    "PRD",
                    "PRE",
                    "PRF",
                    "PRG",
                    "PSB",
                    "PSC",
                    "PSD",
                    "PSE",
                    "PSF",
                    "PTB",
                    "PTC",
                    "PTD",
                    "PTE",
                    "PTF",
                    "PTG",
                    "PUB",
                    "PUC",
                    "PUD",
                    "PUE",
                    "PUF",
                    "PUG",
                    "PVB",
                    "PVC",
                    "PVD",
                    "PVE",
                    "PVF",
                    "PVG",
                    "PWB",
                    "PWC",
                    "PWD",
                    "PWE",
                    "PWF",
                    "PWG",
                    "PXB",
                    "PXC",
                    "PXD",
                    "PXE",
                    "PXF",
                    "PXG",
                    "PYB",
                    "PYC",
                    "PYD",
                    "PYE",
                    "PYF",
                    "PYG",
                    "PZB",
                    "PZC",
                    "PZD",
                    "PZE",
                    "PZF",
                    "PZG",
                    "QAB",
                    "QAC",
                    "QAD",
                    "QAE",
                    "QAF",
                    "QAG",
                    "QBA",
                    "QBB",
                    "QBC",
                    "QBD",
                    "QBE",
                    "QBF",
                    "QCA",
                    "QCB",
                    "QCC",
                    "QCD",
                    "QCE",
                    "QCF",
                    "QCG",
                    "QDA",
                    "QDB",
                    "QDC",
                    "QDD",
                    "QDE",
                    "QDG",
                    "QEA",
                    "QEB",
                    "QEC",
                    "QED",
                    "QEE",
                    "QEF",
                    "QFA",
                    "QFB",
                    "QFC",
                    "QFD",
                    "QFE",
                    "QFF",
                    "QFG",
                    "QGA",
                    "QGB",
                    "QGC",
                    "QGD",
                    "QGE",
                    "QGF",
                    "QGG",
                    "QHA",
                    "QHB",
                    "QHC",
                    "QHD",
                    "QHE",
                    "QHF",
                    "QIA",
                    "QIB",
                    "QIC",
                    "QID",
                    "QIE",
                    "QIF",
                    "QJA",
                    "QJB",
                    "QJC",
                    "QJD",
                    "QJE",
                    "QJF",
                    "QKA",
                    "QKB",
                    "QKC",
                    "QKD",
                    "QKE",
                    "QKF",
                    "QLA",
                    "QLB",
                    "QLC",
                    "QLD",
                    "QLE",
                    "QLF",
                    "QMA",
                    "QMB",
                    "QMC",
                    "QMD",
                    "QME",
                    "QMF",
                    "QNB",
                    "QND",
                    "QNE",
                    "QNF",
                    "QNG",
                    "QOB",
                    "QOC",
                    "QOD",
                    "QOE",
                    "QOF",
                    "QOG",
                    "QPB",
                    "QPC",
                    "QPD",
                    "QPE",
                    "QPF",
                    "QQB",
                    "QQC",
                    "QQD",
                    "QQE",
                    "QQF",
                    "QQG",
                    "QRB",
                    "QRC",
                    "QRD",
                    "QRE",
                    "QRF",
                    "QRG",
                    "QSB",
                    "QSC",
                    "QSD",
                    "QSE",
                    "QSF",
                    "QSG",
                    "QTB",
                    "QTC",
                    "QTD",
                    "QTE",
                    "QTF",
                    "QTG",
                    "QUB",
                    "QUC",
                    "QUD",
                    "QUE",
                    "QUF",
                    "QUG",
                    "QVB",
                    "QVC",
                    "QVD",
                    "QVE",
                    "QVF",
                    "QWB",
                    "QWC",
                    "QWD",
                    "QWE",
                    "QWF",
                    "QWG",
                    "QXB",
                    "QXC",
                    "QXD",
                    "QXE",
                    "QXF",
                    "QXG",
                    "QYB",
                    "QYC",
                    "QYD",
                    "QYE",
                    "QYF",
                    "QYG",
                    "QZB",
                    "QZC",
                    "QZD",
                    "QZE",
                    "QZF",
                    "QZG",
                    "RAB",
                    "RAC",
                    "RAD",
                    "RAE",
                    "RAF",
                    "RAG",
                    "RBA",
                    "RBB",
                    "RBC",
                    "RBD",
                    "RBE",
                    "RBF",
                    "RCA",
                    "RCB",
                    "RCC",
                    "RCD",
                    "RCE",
                    "RCF",
                    "RCG",
                    "RDA",
                    "RDB",
                    "RDC",
                    "RDD",
                    "RDE",
                    "RDF",
                    "RDG",
                    "REA",
                    "REB",
                    "REC",
                    "RED",
                    "REE",
                    "REF",
                    "RFA",
                    "RFB",
                    "RFC",
                    "RFD",
                    "RFE",
                    "RFF",
                    "RFG",
                    "RGA",
                    "RGB",
                    "RGC",
                    "RGD",
                    "RGE",
                    "RGF",
                    "RGG",
                    "RHA",
                    "RHB",
                    "RHC",
                    "RHD",
                    "RHE",
                    "RHF",
                    "RIA",
                    "RIB",
                    "RIC",
                    "RID",
                    "RIE",
                    "RIF",
                    "RJA",
                    "RJB",
                    "RJC",
                    "RJD",
                    "RJE",
                    "RJF",
                    "RKA",
                    "RKB",
                    "RKC",
                    "RKD",
                    "RKE",
                    "RKF",
                    "RLA",
                    "RLB",
                    "RLC",
                    "RLD",
                    "RLE",
                    "RLF",
                    "RMA",
                    "RMB",
                    "RMC",
                    "RMD",
                    "RME",
                    "RMF",
                    "RNB",
                    "RND",
                    "RNE",
                    "RNF",
                    "RNG",
                    "ROB",
                    "ROC",
                    "ROD",
                    "ROE",
                    "ROF",
                    "ROG",
                    "RPB",
                    "RPC",
                    "RPD",
                    "RPE",
                    "RPF",
                    "RQB",
                    "RQC",
                    "RQD",
                    "RQE",
                    "RQF",
                    "RQG",
                    "RRC",
                    "RRD",
                    "RRE",
                    "RRF",
                    "RRG",
                    "RSB",
                    "RSC",
                    "RSD",
                    "RSE",
                    "RSF",
                    "RTB",
                    "RTC",
                    "RTD",
                    "RTE",
                    "RTF",
                    "RTG",
                    "RUB",
                    "RUC",
                    "RUD",
                    "RUE",
                    "RUF",
                    "RUG",
                    "RVB",
                    "RVC",
                    "RVD",
                    "RVE",
                    "RVF",
                    "RVG",
                    "RWB",
                    "RWC",
                    "RWD",
                    "RWE",
                    "RWF",
                    "RWG",
                    "RXB",
                    "RXC",
                    "RXD",
                    "RXE",
                    "RXF",
                    "RXG",
                    "RYB",
                    "RYC",
                    "RYD",
                    "RYE",
                    "RYF",
                    "RYG",
                    "RZB",
                    "RZC",
                    "RZD",
                    "RZE",
                    "RZF",
                    "RZG",
                    "SAB",
                    "SAC",
                    "SAD",
                    "SAE",
                    "SAF",
                    "SAG",
                    "SBA",
                    "SBB",
                    "SBC",
                    "SBD",
                    "SBE",
                    "SBF",
                    "SCA",
                    "SCB",
                    "SCC",
                    "SCD",
                    "SCE",
                    "SCF",
                    "SCG",
                    "SDA",
                    "SDB",
                    "SDC",
                    "SDD",
                    "SDE",
                    "SDF",
                    "SDG",
                    "SEA",
                    "SEB",
                    "SEC",
                    "SED",
                    "SEE",
                    "SEF",
                    "SFA",
                    "SFB",
                    "SFC",
                    "SFD",
                    "SFE",
                    "SFF",
                    "SFG",
                    "SGA",
                    "SGB",
                    "SGC",
                    "SGD",
                    "SGE",
                    "SGF",
                    "SGG",
                    "SHA",
                    "SHB",
                    "SHC",
                    "SHD",
                    "SHE",
                    "SHF",
                    "SIA",
                    "SIB",
                    "SIC",
                    "SID",
                    "SIE",
                    "SIF",
                    "SJA",
                    "SJB",
                    "SJC",
                    "SJD",
                    "SJE",
                    "SJF",
                    "SKA",
                    "SKB",
                    "SKC",
                    "SKD",
                    "SKE",
                    "SKF",
                    "SLA",
                    "SLB",
                    "SLC",
                    "SLD",
                    "SLE",
                    "SLF",
                    "SMA",
                    "SMB",
                    "SMC",
                    "SMD",
                    "SME",
                    "SMF",
                    "SNB",
                    "SND",
                    "SNE",
                    "SNF",
                    "SNG",
                    "SOB",
                    "SOC",
                    "SOD",
                    "SOE",
                    "SOF",
                    "SOG",
                    "SPB",
                    "SPC",
                    "SPD",
                    "SPE",
                    "SPF",
                    "SPG",
                    "SQB",
                    "SQC",
                    "SQD",
                    "SQE",
                    "SQF",
                    "SQG",
                    "SRB",
                    "SRC",
                    "SRD",
                    "SRE",
                    "SRF",
                    "SRG",
                    "SSB",
                    "SSC",
                    "SSD",
                    "SSE",
                    "SSF",
                    "SSG",
                    "STB",
                    "STC",
                    "STD",
                    "STE",
                    "STF",
                    "STG",
                    "SUB",
                    "SUC",
                    "SUD",
                    "SUE",
                    "SUF",
                    "SUG",
                    "SVB",
                    "SVC",
                    "SVD",
                    "SVE",
                    "SVF",
                    "SVG",
                    "SWB",
                    "SWC",
                    "SWD",
                    "SWE",
                    "SWF",
                    "SWG",
                    "SXB",
                    "SXC",
                    "SXD",
                    "SXE",
                    "SXF",
                    "SXG",
                    "SYB",
                    "SYC",
                    "SYD",
                    "SYE",
                    "SYF",
                    "SYG",
                    "SZB",
                    "SZC",
                    "SZD",
                    "SZE",
                    "SZF",
                    "SZG",
                    "TAB",
                    "TAC",
                    "TAD",
                    "TAE",
                    "TAF",
                    "TAG",
                    "TBA",
                    "TBB",
                    "TBC",
                    "TBD",
                    "TBE",
                    "TBF",
                    "TCA",
                    "TCB",
                    "TCC",
                    "TCD",
                    "TCE",
                    "TCF",
                    "TCG",
                    "TDA",
                    "TDB",
                    "TDC",
                    "TDD",
                    "TDE",
                    "TDF",
                    "TDG",
                    "TEA",
                    "TEB",
                    "TEC",
                    "TED",
                    "TEE",
                    "TEF",
                    "TFA",
                    "TFB",
                    "TFC",
                    "TFD",
                    "TFE",
                    "TFF",
                    "TFG",
                    "TGA",
                    "TGB",
                    "TGC",
                    "TGD",
                    "TGE",
                    "TGF",
                    "TGG",
                    "THA",
                    "THB",
                    "THC",
                    "THD",
                    "THE",
                    "THF",
                    "TIA",
                    "TIB",
                    "TIC",
                    "TID",
                    "TIE",
                    "TIF",
                    "TJA",
                    "TJB",
                    "TJC",
                    "TJD",
                    "TJE",
                    "TJF",
                    "TKA",
                    "TKB",
                    "TKC",
                    "TKD",
                    "TKE",
                    "TKF",
                    "TLA",
                    "TLB",
                    "TLC",
                    "TLD",
                    "TLE",
                    "TLF",
                    "TMA",
                    "TMB",
                    "TMC",
                    "TMD",
                    "TME",
                    "TMF",
                    "TNB",
                    "TNC",
                    "TND",
                    "TNE",
                    "TNF",
                    "TNG",
                    "TOB",
                    "TOC",
                    "TOD",
                    "TOE",
                    "TOF",
                    "TOG",
                    "TPB",
                    "TPC",
                    "TPD",
                    "TPE",
                    "TPF",
                    "TPG",
                    "TQB",
                    "TQC",
                    "TQD",
                    "TQE",
                    "TQF",
                    "TQG",
                    "TRB",
                    "TRC",
                    "TRD",
                    "TRE",
                    "TRF",
                    "TRG",
                    "TSB",
                    "TSC",
                    "TSD",
                    "TSE",
                    "TSF",
                    "TSG",
                    "TTB",
                    "TTC",
                    "TTD",
                    "TTE",
                    "TTF",
                    "TTG",
                    "TUB",
                    "TUD",
                    "TUE",
                    "TUF",
                    "TUG",
                    "TVB",
                    "TVC",
                    "TVD",
                    "TVE",
                    "TVF",
                    "TVG",
                    "TWB",
                    "TWC",
                    "TWD",
                    "TWE",
                    "TWF",
                    "TWG",
                    "TXB",
                    "TXC",
                    "TXD",
                    "TXE",
                    "TXF",
                    "TXG",
                    "TYB",
                    "TYC",
                    "TYD",
                    "TYE",
                    "TYF",
                    "TYG",
                    "TZB",
                    "TZC",
                    "TZD",
                    "TZE",
                    "TZF",
                    "TZG",
                    "UAB",
                    "UAC",
                    "UAD",
                    "UAE",
                    "UAF",
                    "UAG",
                    "UBA",
                    "UBB",
                    "UBC",
                    "UBD",
                    "UBE",
                    "UBF",
                    "UCA",
                    "UCB",
                    "UCC",
                    "UCD",
                    "UCE",
                    "UCF",
                    "UCG",
                    "UDA",
                    "UDB",
                    "UDC",
                    "UDD",
                    "UDE",
                    "UDF",
                    "UDG",
                    "UEA",
                    "UEB",
                    "UEC",
                    "UED",
                    "UEE",
                    "UEF",
                    "UFA",
                    "UFB",
                    "UFC",
                    "UFD",
                    "UFF",
                    "UFG",
                    "UGA",
                    "UGB",
                    "UGC",
                    "UGD",
                    "UGE",
                    "UGF",
                    "UGG",
                    "UHA",
                    "UHB",
                    "UHC",
                    "UHD",
                    "UHE",
                    "UHF",
                    "UIA",
                    "UIB",
                    "UIC",
                    "UID",
                    "UIE",
                    "UIF",
                    "UJA",
                    "UJB",
                    "UJC",
                    "UJD",
                    "UJE",
                    "UJF",
                    "UKA",
                    "UKB",
                    "UKC",
                    "UKD",
                    "UKE",
                    "UKF",
                    "ULA",
                    "ULB",
                    "ULC",
                    "ULD",
                    "ULE",
                    "ULF",
                    "UMA",
                    "UMB",
                    "UMC",
                    "UMD",
                    "UME",
                    "UMF",
                    "UNB",
                    "UNC",
                    "UND",
                    "UNE",
                    "UNF",
                    "UNG",
                    "UOB",
                    "UOC",
                    "UOD",
                    "UOE",
                    "UOF",
                    "UOG",
                    "UPB",
                    "UPC",
                    "UPD",
                    "UPE",
                    "UPF",
                    "UPG",
                    "UQB",
                    "UQC",
                    "UQD",
                    "UQE",
                    "UQF",
                    "UQG",
                    "URB",
                    "URC",
                    "URD",
                    "URE",
                    "URF",
                    "URG",
                    "USB",
                    "USC",
                    "USD",
                    "USE",
                    "USF",
                    "USG",
                    "UTB",
                    "UTC",
                    "UTD",
                    "UTE",
                    "UTF",
                    "UTG",
                    "UUB",
                    "UUC",
                    "UUD",
                    "UUE",
                    "UUF",
                    "UUG",
                    "UVB",
                    "UVC",
                    "UVD",
                    "UVE",
                    "UVF",
                    "UVG",
                    "UWB",
                    "UWC",
                    "UWD",
                    "UWE",
                    "UWF",
                    "UWG",
                    "UXB",
                    "UXC",
                    "UXD",
                    "UXE",
                    "UXF",
                    "UXG",
                    "UYB",
                    "UYC",
                    "UYD",
                    "UYE",
                    "UYF",
                    "UYG",
                    "UZB",
                    "UZC",
                    "UZD",
                    "UZE",
                    "UZF",
                    "UZG",
                    "VAB",
                    "VAC",
                    "VAD",
                    "VAE",
                    "VAF",
                    "VAG",
                    "VBA",
                    "VBB",
                    "VBC",
                    "VBD",
                    "VBE",
                    "VBF",
                    "VBG",
                    "VCA",
                    "VCB",
                    "VCC",
                    "VCD",
                    "VCE",
                    "VCF",
                    "VCG",
                    "VDA",
                    "VDB",
                    "VDC",
                    "VDD",
                    "VDE",
                    "VDF",
                    "VDG",
                    "VEA",
                    "VEB",
                    "VEC",
                    "VED",
                    "VEE",
                    "VEF",
                    "VFA",
                    "VFB",
                    "VFC",
                    "VFD",
                    "VFE",
                    "VFF",
                    "VFG",
                    "VGA",
                    "VGB",
                    "VGC",
                    "VGD",
                    "VGE",
                    "VGF",
                    "VGG",
                    "VHA",
                    "VHB",
                    "VHC",
                    "VHD",
                    "VHE",
                    "VHF",
                    "VIA",
                    "VIB",
                    "VIC",
                    "VID",
                    "VIE",
                    "VIF",
                    "VJA",
                    "VJB",
                    "VJC",
                    "VJD",
                    "VJE",
                    "VKA",
                    "VKB",
                    "VKC",
                    "VKD",
                    "VKE",
                    "VKF",
                    "VLA",
                    "VLB",
                    "VLC",
                    "VLD",
                    "VLE",
                    "VLF",
                    "VMA",
                    "VMB",
                    "VMC",
                    "VMD",
                    "VME",
                    "VMF",
                    "VNB",
                    "VNC",
                    "VND",
                    "VNE",
                    "VNF",
                    "VNG",
                    "VOB",
                    "VOC",
                    "VOD",
                    "VOE",
                    "VOF",
                    "VOG",
                    "VPB",
                    "VPC",
                    "VPD",
                    "VPE",
                    "VPF",
                    "VPG",
                    "VQB",
                    "VQC",
                    "VQD",
                    "VQE",
                    "VQF",
                    "VQG",
                    "VRB",
                    "VRC",
                    "VRD",
                    "VRE",
                    "VRF",
                    "VRG",
                    "VSB",
                    "VSC",
                    "VSD",
                    "VSE",
                    "VSF",
                    "VSG",
                    "VTB",
                    "VTC",
                    "VTD",
                    "VTE",
                    "VTF",
                    "VTG",
                    "VUB",
                    "VUC",
                    "VUD",
                    "VUE",
                    "VUF",
                    "VUG",
                    "VVB",
                    "VVC",
                    "VVD",
                    "VVE",
                    "VVF",
                    "VVG",
                    "VWB",
                    "VWC",
                    "VWD",
                    "VWE",
                    "VWF",
                    "VWG",
                    "VXC",
                    "VXD",
                    "VXE",
                    "VXF",
                    "VXG",
                    "VYB",
                    "VYC",
                    "VYD",
                    "VYE",
                    "VYF",
                    "VYG",
                    "VZB",
                    "VZC",
                    "VZD",
                    "VZE",
                    "VZF",
                    "VZG",
                    "WAB",
                    "WAC",
                    "WAD",
                    "WAE",
                    "WAF",
                    "WAG",
                    "WBA",
                    "WBB",
                    "WBC",
                    "WBD",
                    "WBE",
                    "WBF",
                    "WBG",
                    "WCA",
                    "WCB",
                    "WCC",
                    "WCD",
                    "WCE",
                    "WCF",
                    "WCG",
                    "WDA",
                    "WDC",
                    "WDD",
                    "WDE",
                    "WDF",
                    "WDG",
                    "WEA",
                    "WEB",
                    "WEC",
                    "WED",
                    "WEE",
                    "WEF",
                    "WFA",
                    "WFB",
                    "WFC",
                    "WFD",
                    "WFE",
                    "WFF",
                    "WFG",
                    "WGA",
                    "WGB",
                    "WGC",
                    "WGD",
                    "WGE",
                    "WGF",
                    "WGG",
                    "WHA",
                    "WHB",
                    "WHC",
                    "WHD",
                    "WHE",
                    "WHF",
                    "WIA",
                    "WIB",
                    "WIC",
                    "WID",
                    "WIE",
                    "WIF",
                    "WJA",
                    "WJB",
                    "WJC",
                    "WJD",
                    "WJE",
                    "WJF",
                    "WKA",
                    "WKB",
                    "WKC",
                    "WKD",
                    "WKE",
                    "WKF",
                    "WLA",
                    "WLB",
                    "WLC",
                    "WLD",
                    "WLE",
                    "WLF",
                    "WMA",
                    "WMB",
                    "WMC",
                    "WMD",
                    "WME",
                    "WMF",
                    "WNB",
                    "WNC",
                    "WND",
                    "WNE",
                    "WNF",
                    "WNG",
                    "WOB",
                    "WOC",
                    "WOD",
                    "WOE",
                    "WOF",
                    "WOG",
                    "WPB",
                    "WPC",
                    "WPD",
                    "WPE",
                    "WPF",
                    "WPG",
                    "WQB",
                    "WQC",
                    "WQD",
                    "WQE",
                    "WQF",
                    "WQG",
                    "WRB",
                    "WRC",
                    "WRD",
                    "WRE",
                    "WRF",
                    "WRG",
                    "WSB",
                    "WSC",
                    "WSD",
                    "WSE",
                    "WSF",
                    "WSG",
                    "WTB",
                    "WTC",
                    "WTD",
                    "WTE",
                    "WTF",
                    "WTG",
                    "WUB",
                    "WUC",
                    "WUD",
                    "WUE",
                    "WUF",
                    "WUG",
                    "WVB",
                    "WVC",
                    "WVD",
                    "WVE",
                    "WVF",
                    "WVG",
                    "WWB",
                    "WWC",
                    "WWD",
                    "WWE",
                    "WWF",
                    "WWG",
                    "WXB",
                    "WXC",
                    "WXD",
                    "WXE",
                    "WXF",
                    "WXG",
                    "WYB",
                    "WYC",
                    "WYD",
                    "WYE",
                    "WYF",
                    "WYG",
                    "WZB",
                    "WZC",
                    "WZD",
                    "WZE",
                    "WZF",
                    "WZG",
                    "XAC",
                    "XAD",
                    "XAE",
                    "XAF",
                    "XBA",
                    "XBB",
                    "XBC",
                    "XBD",
                    "XBE",
                    "XBF",
                    "XBG",
                    "XCA",
                    "XCB",
                    "XCC",
                    "XCD",
                    "XCE",
                    "XCF",
                    "XCG",
                    "XDA",
                    "XDB",
                    "XDC",
                    "XDD",
                    "XDE",
                    "XDF",
                    "XDG",
                    "XEA",
                    "XEB",
                    "XEC",
                    "XED",
                    "XEE",
                    "XEF",
                    "XFA",
                    "XFB",
                    "XFC",
                    "XFD",
                    "XFE",
                    "XFF",
                    "XFG",
                    "XGA",
                    "XGB",
                    "XGC",
                    "XGD",
                    "XGE",
                    "XGF",
                    "XGG",
                    "XHA",
                    "XHB",
                    "XHC",
                    "XHD",
                    "XHE",
                    "XHF",
                    "XIA",
                    "XIB",
                    "XIC",
                    "XID",
                    "XIE",
                    "XIF",
                    "XJA",
                    "XJB",
                    "XJC",
                    "XJD",
                    "XJE",
                    "XJF",
                    "XKA",
                    "XKB",
                    "XKC",
                    "XKD",
                    "XKE",
                    "XKF",
                    "XLA",
                    "XLB",
                    "XLC",
                    "XLD",
                    "XLE",
                    "XLF",
                    "XMA",
                    "XMB",
                    "XMC",
                    "XMD",
                    "XME",
                    "XMF",
                    "XNB",
                    "XNC",
                    "XND",
                    "XNE",
                    "XNF",
                    "XNG",
                    "XOB",
                    "XOC",
                    "XOD",
                    "XOE",
                    "XOF",
                    "XOG",
                    "XPB",
                    "XPC",
                    "XPD",
                    "XPE",
                    "XPF",
                    "XPG",
                    "XQB",
                    "XQC",
                    "XQD",
                    "XQF",
                    "XQG",
                    "XRB",
                    "XRC",
                    "XRD",
                    "XRE",
                    "XRF",
                    "XRG",
                    "XSB",
                    "XSC",
                    "XSD",
                    "XSE",
                    "XSF",
                    "XSG",
                    "XTB",
                    "XTC",
                    "XTD",
                    "XTE",
                    "XTF",
                    "XTG",
                    "XUB",
                    "XUC",
                    "XUD",
                    "XUE",
                    "XUF",
                    "XUG",
                    "XVB",
                    "XVC",
                    "XVD",
                    "XVE",
                    "XVF",
                    "XVG",
                    "XWB",
                    "XWC",
                    "XWD",
                    "XWE",
                    "XWF",
                    "XWG",
                    "XXB",
                    "XXC",
                    "XXD",
                    "XXE",
                    "XXF",
                    "XXG",
                    "XYB",
                    "XYC",
                    "XYD",
                    "XYE",
                    "XYF",
                    "XYG",
                    "XZB",
                    "XZC",
                    "XZD",
                    "XZE",
                    "XZF",
                    "XZG",
                    "YAB",
                    "YAC",
                    "YAD",
                    "YAE",
                    "YAF",
                    "YAG",
                    "YBA",
                    "YBB",
                    "YBC",
                    "YBD",
                    "YBE",
                    "YBF",
                    "YCA",
                    "YCB",
                    "YCD",
                    "YCE",
                    "YCF",
                    "YCG",
                    "YDA",
                    "YDB",
                    "YDC",
                    "YDD",
                    "YDE",
                    "YDF",
                    "YDG",
                    "YEA",
                    "YEB",
                    "YEC",
                    "YED",
                    "YEE",
                    "YEF",
                    "YFA",
                    "YFB",
                    "YFC",
                    "YFD",
                    "YFE",
                    "YFG",
                    "YGA",
                    "YGB",
                    "YGC",
                    "YGD",
                    "YGE",
                    "YGF",
                    "YGG",
                    "YHA",
                    "YHB",
                    "YHC",
                    "YHD",
                    "YHE",
                    "YHF",
                    "YIA",
                    "YIB",
                    "YIC",
                    "YID",
                    "YIE",
                    "YIF",
                    "YJA",
                    "YJB",
                    "YJC",
                    "YJD",
                    "YJE",
                    "YJF",
                    "YKA",
                    "YKB",
                    "YKC",
                    "YKD",
                    "YKE",
                    "YKF",
                    "YLA",
                    "YLB",
                    "YLC",
                    "YLD",
                    "YLE",
                    "YLF",
                    "YMA",
                    "YMB",
                    "YMC",
                    "YMD",
                    "YME",
                    "YMF",
                    "YNB",
                    "YNC",
                    "YND",
                    "YNE",
                    "YNF",
                    "YNG",
                    "YOB",
                    "YOC",
                    "YOD",
                    "YOE",
                    "YOF",
                    "YOG",
                    "YPB",
                    "YPC",
                    "YPD",
                    "YPE",
                    "YPF",
                    "YPG",
                    "YQB",
                    "YQC",
                    "YQD",
                    "YQF",
                    "YQG",
                    "YRB",
                    "YRC",
                    "YRD",
                    "YRE",
                    "YRF",
                    "YRG",
                    "YSB",
                    "YSC",
                    "YSD",
                    "YSE",
                    "YSF",
                    "YSG",
                    "YTB",
                    "YTC",
                    "YTD",
                    "YTE",
                    "YTF",
                    "YTG",
                    "YUB",
                    "YUC",
                    "YUD",
                    "YUE",
                    "YUF",
                    "YUG",
                    "YVB",
                    "YVC",
                    "YVD",
                    "YVE",
                    "YVF",
                    "YVG",
                    "YWB",
                    "YWC",
                    "YWD",
                    "YWE",
                    "YWF",
                    "YWG",
                    "YXB",
                    "YXC",
                    "YXD",
                    "YXE",
                    "YXF",
                    "YXG",
                    "YYB",
                    "YYC",
                    "YYD",
                    "YYE",
                    "YYF",
                    "YYG",
                    "YZB",
                    "YZC",
                    "YZD",
                    "YZE",
                    "YZF",
                    "YZG",
                    "ZAB",
                    "ZAD",
                    "ZAE",
                    "ZAF",
                    "ZAG",
                    "ZBA",
                    "ZBB",
                    "ZBC",
                    "ZBD",
                    "ZBE",
                    "ZBF",
                    "ZCA",
                    "ZCB",
                    "ZCC",
                    "ZCD",
                    "ZCE",
                    "ZCF",
                    "ZCG",
                    "ZDA",
                    "ZDB",
                    "ZDC",
                    "ZDD",
                    "ZDE",
                    "ZDF",
                    "ZDG",
                    "ZEA",
                    "ZEB",
                    "ZEC",
                    "ZED",
                    "ZEE",
                    "ZEF",
                    "ZFA",
                    "ZFB",
                    "ZFC",
                    "ZFD",
                    "ZFE",
                    "ZFF",
                    "ZFG",
                    "ZGA",
                    "ZGB",
                    "ZGC",
                    "ZGD",
                    "ZGE",
                    "ZGF",
                    "ZGG",
                    "ZHA",
                    "ZHB",
                    "ZHC",
                    "ZHD",
                    "ZHE",
                    "ZHF",
                    "ZIA",
                    "ZIB",
                    "ZIC",
                    "ZID",
                    "ZIE",
                    "ZIF",
                    "ZJA",
                    "ZJB",
                    "ZJC",
                    "ZJD",
                    "ZJE",
                    "ZJF",
                    "ZKA",
                    "ZKB",
                    "ZKC",
                    "ZKD",
                    "ZKE",
                    "ZKF",
                    "ZLA",
                    "ZLB",
                    "ZLC",
                    "ZLD",
                    "ZLE",
                    "ZLF",
                    "ZMA",
                    "ZMB",
                    "ZMC",
                    "ZMD",
                    "ZME",
                    "ZMF",
                    "ZNB",
                    "ZNC",
                    "ZND",
                    "ZNE",
                    "ZNF",
                    "ZNG",
                    "ZOB",
                    "ZOC",
                    "ZOD",
                    "ZOE",
                    "ZOF",
                    "ZPB",
                    "ZPC",
                    "ZPD",
                    "ZPE",
                    "ZPF",
                    "ZPG",
                    "ZQB",
                    "ZQC",
                    "ZQD",
                    "ZQF",
                    "ZQG",
                    "ZRB",
                    "ZRC",
                    "ZRD",
                    "ZRE",
                    "ZRF",
                    "ZRG",
                    "ZSB",
                    "ZSC",
                    "ZSD",
                    "ZSE",
                    "ZSF",
                    "ZSG",
                    "ZTB",
                    "ZTC",
                    "ZTD",
                    "ZTE",
                    "ZTF",
                    "ZTG",
                    "ZUB",
                    "ZUC",
                    "ZUD",
                    "ZUE",
                    "ZUF",
                    "ZUG",
                    "ZVB",
                    "ZVC",
                    "ZVD",
                    "ZVE",
                    "ZVF",
                    "ZVG",
                    "ZWB",
                    "ZWC",
                    "ZWD",
                    "ZWE",
                    "ZWF",
                    "ZWG",
                    "ZXB",
                    "ZXC",
                    "ZXD",
                    "ZXE",
                    "ZXF",
                    "ZXG",
                    "ZYB",
                    "ZYC",
                    "ZYD",
                    "ZYE",
                    "ZYF",
                    "ZYG",
                    "ZZB",
                    "ZZC",
                    "ZZD",
                    "ZZE",
                    "ZZF",
                    "ZZG"
                ]
            },
            "FactionStatEnum": {
                "type": "string",
                "enum": [
                    "medicalitemsused",
                    "criminaloffences",
                    "organisedcrimerespect",
                    "organisedcrimemoney",
                    "organisedcrimesuccess",
                    "organisedcrimefail",
                    "attackswon",
                    "attackslost",
                    "attackschain",
                    "attacksleave",
                    "attacksmug",
                    "attackshosp",
                    "bestchain",
                    "busts",
                    "revives",
                    "jails",
                    "hosps",
                    "medicalitemrecovery",
                    "medicalcooldownused",
                    "gymtrains",
                    "gymstrength",
                    "gymspeed",
                    "gymdefense",
                    "gymdexterity",
                    "candyused",
                    "alcoholused",
                    "energydrinkused",
                    "drugsused",
                    "drugoverdoses",
                    "rehabs",
                    "caymaninterest",
                    "traveltimes",
                    "traveltime",
                    "hunting",
                    "attacksdamagehits",
                    "attacksdamage",
                    "hosptimegiven",
                    "hosptimereceived",
                    "attacksdamaging",
                    "attacksrunaway",
                    "highestterritories",
                    "territoryrespect",
                    "membersamount",
                    "factionage",
                    "upgradesamount"
                ]
            },
            "FactionBranchStateEnum": {
                "type": "string",
                "enum": [
                    "war",
                    "peace"
                ]
            },
            "FactionPositionAbilityEnum": {
                "type": "string",
                "enum": [
                    "Medical Item Usage",
                    "Booster Item Usage",
                    "Drug Item Usage",
                    "Energy Refill Usage",
                    "Nerve Refill Usage",
                    "Temporary Item Loaning",
                    "Weapon & Armor Loaning",
                    "Item Retrieving",
                    "Organised Crimes",
                    "Faction API Access",
                    "Item Giving",
                    "Money Giving",
                    "Points Giving",
                    "Forum Management",
                    "Application Management",
                    "Kick Members",
                    "Balance Adjustment",
                    "War Management",
                    "Upgrade Management",
                    "Newsletter Sending",
                    "Announcement Changes",
                    "Description Changes"
                ]
            },
            "FactionOrganizedCrimePayoutType": {
                "type": "string",
                "enum": [
                    "balance",
                    "wallet",
                    "inventory"
                ]
            },
            "TornRacketType": {
                "type": "string",
                "enum": [
                    "Item",
                    "Points",
                    "Money"
                ]
            },
            "FactionNewsCategory": {
                "type": "string",
                "enum": [
                    "main",
                    "attack",
                    "armoryDeposit",
                    "armoryAction",
                    "territoryWar",
                    "rankedWar",
                    "territoryGain",
                    "chain",
                    "crime",
                    "membership",
                    "depositFunds",
                    "giveFunds"
                ]
            },
            "FactionRankEnum": {
                "type": "string",
                "enum": [
                    "Unranked",
                    "Bronze",
                    "Silver",
                    "Gold",
                    "Platinum",
                    "Diamond"
                ]
            },
            "UserCrimeUniquesRewardAmmoEnum": {
                "type": "string",
                "enum": [
                    "standard",
                    "special"
                ]
            },
            "RaceStatusEnum": {
                "type": "string",
                "enum": [
                    "open",
                    "in_progress",
                    "finished"
                ]
            },
            "TornHofCategory": {
                "type": "string",
                "enum": [
                    "level",
                    "busts",
                    "rank",
                    "traveltime",
                    "workstats",
                    "networth",
                    "revives",
                    "defends",
                    "offences",
                    "attacks",
                    "awards",
                    "racingwins",
                    "racingpoints",
                    "racingskill"
                ]
            },
            "TornFactionHofCategory": {
                "type": "string",
                "enum": [
                    "respect",
                    "chains",
                    "rank"
                ]
            },
            "FactionTerritoryWarResultEnum": {
                "type": "string",
                "enum": [
                    "success_assault",
                    "fail_assault",
                    "end_with_nap",
                    "end_with_destroy_attack",
                    "end_with_destroy_defense",
                    "end_with_peace_treaty"
                ]
            },
            "FactionAttackResult": {
                "type": "string",
                "enum": [
                    "None",
                    "Attacked",
                    "Mugged",
                    "Hospitalized",
                    "Arrested",
                    "Looted",
                    "Lost",
                    "Stalemate",
                    "Assist",
                    "Escape",
                    "Timeout",
                    "Special",
                    "Bounty",
                    "Interrupted"
                ]
            },
            "RaceCarUpgradeCategory": {
                "type": "string",
                "enum": [
                    "Aerodynamics",
                    "Brakes",
                    "Engine",
                    "Exhaust and Induction",
                    "Fuel",
                    "Safety",
                    "Suspension",
                    "Transmission",
                    "Weight Reduction",
                    "Wheels and Tyres"
                ]
            },
            "JobPositionArmyEnum": {
                "type": "string",
                "enum": [
                    "Private",
                    "Corporal",
                    "Sergeant",
                    "Master Sergeant",
                    "Warrant Officer",
                    "Lieutenant",
                    "Major",
                    "Colonel",
                    "Brigadier",
                    "General"
                ]
            },
            "JobPositionGrocerEnum": {
                "type": "string",
                "enum": [
                    "Bagboy",
                    "Price Labeler",
                    "Cashier",
                    "Food Delivery",
                    "Manager"
                ]
            },
            "WeaponBonusEnum": {
                "type": "string",
                "enum": [
                    "Any",
                    "Double",
                    "Yellow",
                    "Orange",
                    "Red",
                    "Achilles",
                    "Assassinate",
                    "Backstab",
                    "Berserk",
                    "Bleed",
                    "Blindfire",
                    "Blindside",
                    "Bloodlust",
                    "Burn",
                    "Comeback",
                    "Conserve",
                    "Cripple",
                    "Crusher",
                    "Cupid",
                    "Deadeye",
                    "Deadly",
                    "Demoralize",
                    "Disarm",
                    "Double-edged",
                    "Double Tap",
                    "Emasculate",
                    "Empower",
                    "Eviscerate",
                    "Execute",
                    "Expose",
                    "Finale",
                    "Focus",
                    "Freeze",
                    "Frenzy",
                    "Fury",
                    "Grace",
                    "Hazardous",
                    "Home run",
                    "Irradiate",
                    "Lacerate",
                    "Motivation",
                    "Paralyze",
                    "Parry",
                    "Penetrate",
                    "Plunder",
                    "Poison",
                    "Powerful",
                    "Proficience",
                    "Puncture",
                    "Quicken",
                    "Rage",
                    "Revitalize",
                    "Roshambo",
                    "Shock",
                    "Sleep",
                    "Slow",
                    "Smash",
                    "Smurf",
                    "Specialist",
                    "Spray",
                    "Storage",
                    "Stricken",
                    "Stun",
                    "Suppress",
                    "Sure Shot",
                    "Throttle",
                    "Toxin",
                    "Warlord",
                    "Weaken",
                    "Wind-up",
                    "Wither"
                ]
            },
            "UserListEnum": {
                "type": "string",
                "enum": [
                    "Friends",
                    "Enemies",
                    "Targets"
                ]
            },
            "JobPositionCasinoEnum": {
                "type": "string",
                "enum": [
                    "Gaming Consultant",
                    "Marketing Manager",
                    "Revenue Manager",
                    "Casino Manager",
                    "Casino President"
                ]
            },
            "AttackFinishingHitEffect": {
                "type": "string",
                "enum": [
                    "proficience",
                    "stricken",
                    "revitalize",
                    "warlord",
                    "plunder",
                    "irradiate"
                ]
            },
            "JobPositionMedicalEnum": {
                "type": "string",
                "enum": [
                    "Medical Student",
                    "Houseman",
                    "Senior Houseman",
                    "GP",
                    "Consultant",
                    "Surgeon",
                    "Brain Surgeon"
                ]
            },
            "JobPositionLawEnum": {
                "type": "string",
                "enum": [
                    "Law Student",
                    "Paralegal",
                    "Probate Lawyer",
                    "Trial Lawyer",
                    "Circuit Court Judge",
                    "Federal Judge"
                ]
            },
            "JobPositionEducationEnum": {
                "type": "string",
                "enum": [
                    "Recess Supervisor",
                    "Substitute Teacher",
                    "Elementary Teacher",
                    "Secondary Teacher",
                    "Professor",
                    "Vice-Principal",
                    "Principal"
                ]
            },
            "RaceCarUpgradeSubCategory": {
                "type": "string",
                "enum": [
                    "Engine Cooling",
                    "Front Diffuser",
                    "Rear Diffuser",
                    "Spoiler",
                    "Brake Accessory",
                    "Brake Control",
                    "Callipers",
                    "Discs",
                    "Brake Cooling",
                    "Fluid",
                    "Rear Control Arms",
                    "Springs",
                    "Upper Front Brace",
                    "Clutch",
                    "Differential",
                    "Flywheel",
                    "Gearbox",
                    "Shifting",
                    "Boot",
                    "Hood",
                    "Interior",
                    "Roof",
                    "Steering wheel",
                    "Strip out",
                    "Windows",
                    "Tyres",
                    "Wheels",
                    "Rear Bushes",
                    "Rear Brace",
                    "Lower Front Brace",
                    "Front Tie Rods",
                    "Front Bushes",
                    "Seat",
                    "Safety Accessory",
                    "Roll cage",
                    "Overalls",
                    "Helmet",
                    "Fire Extinguisher",
                    "Cut-off",
                    "Fuel",
                    "Manifold",
                    "Exhaust",
                    "Air Filter",
                    "Turbo",
                    "Pistons",
                    "Intercooler",
                    "Gasket",
                    "Fuel Pump",
                    "Engine Porting",
                    "Engine Cleaning",
                    "Computer",
                    "Camshaft",
                    "Pads"
                ]
            },
            "FactionApplicationStatusEnum": {
                "type": "string",
                "enum": [
                    "accepted",
                    "declined",
                    "withdrawn"
                ]
            },
            "FactionRankedWarsCategoryEnum": {
                "type": "string",
                "enum": [
                    "all",
                    "ongoing"
                ]
            },
            "FactionTerritoryWarsCategoryEnum": {
                "type": "string",
                "enum": [
                    "finsihed",
                    "ongoing"
                ]
            },
            "FactionCrimeUserOutcome": {
                "type": "string",
                "enum": [
                    "Successful",
                    "Failed",
                    "Jailed",
                    "Injured",
                    "Hospitalized"
                ]
            },
            "RaceId": {
                "type": "integer",
                "format": "int32"
            },
            "RaceTrackId": {
                "type": "integer",
                "format": "int32"
            },
            "RaceCarId": {
                "type": "integer",
                "format": "int32"
            },
            "RaceCarUpgradeId": {
                "type": "integer",
                "format": "int32"
            },
            "ItemId": {
                "type": "integer",
                "format": "int64"
            },
            "ItemModId": {
                "type": "integer",
                "format": "int32"
            },
            "AmmoId": {
                "type": "integer",
                "format": "int32"
            },
            "RankedWarId": {
                "type": "integer",
                "format": "int32"
            },
            "TerritoryWarId": {
                "type": "integer",
                "format": "int32"
            },
            "ItemUid": {
                "type": "integer",
                "format": "int64"
            },
            "UserId": {
                "type": "integer",
                "format": "int32"
            },
            "ReviveId": {
                "type": "integer",
                "format": "int32"
            },
            "LogId": {
                "type": "integer",
                "format": "int32"
            },
            "LogCategoryId": {
                "type": "integer",
                "format": "int32"
            },
            "FactionId": {
                "type": "integer",
                "format": "int32"
            },
            "CompanyId": {
                "type": "integer",
                "format": "int32"
            },
            "EducationId": {
                "type": "integer",
                "format": "int32"
            },
            "FactionBranchId": {
                "type": "integer",
                "format": "int32"
            },
            "FactionCrimeId": {
                "type": "integer",
                "format": "int64"
            },
            "TornCrimeId": {
                "type": "integer",
                "format": "int32"
            },
            "ChainId": {
                "type": "integer",
                "format": "int32"
            },
            "AttackId": {
                "type": "integer",
                "format": "int32"
            },
            "AttackCode": {
                "type": "string"
            },
            "ForumId": {
                "type": "integer",
                "format": "int32"
            },
            "ForumThreadId": {
                "type": "integer",
                "format": "int32"
            },
            "ForumPostId": {
                "type": "integer",
                "format": "int32"
            },
            "RequestLinks": {
                "required": [
                    "next",
                    "prev"
                ],
                "properties": {
                    "next": {
                        "description": "Auto-generated link to get the next set of records.",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "prev": {
                        "description": "Auto-generated link to get the prev set of records.",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "RequestMetadata": {
                "required": [
                    "links"
                ],
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/RequestLinks"
                    }
                },
                "type": "object"
            },
            "RequestMetadataWithLinks": {
                "required": [
                    "links"
                ],
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/RequestLinks"
                    }
                },
                "type": "object"
            },
            "ForumFeedTypeEnum": {
                "description": "This represents the type of the activity. Values range from 1 to 8 where:\n *                    1 = 'X posted on a thread',\n *                    2 = 'X created a thread',\n *                    3 = 'X liked your thread',\n *                    4 = 'X disliked your thread',\n *                    5 = 'X liked your post',\n *                    6 = 'X disliked your post',\n *                    7 = 'X quoted your post'.",
                "type": "integer",
                "format": "int32",
                "enum": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ]
            },
            "ReviveSetting": {
                "type": "string",
                "enum": [
                    "Everyone",
                    "Friends & faction",
                    "No one",
                    "Unknown"
                ]
            },
            "FactionCrimeStatusEnum": {
                "type": "string",
                "enum": [
                    "Recruiting",
                    "Planning",
                    "Successful",
                    "Failure",
                    "Expired"
                ]
            },
            "AttackActionEnum": {
                "type": "string",
                "enum": [
                    "attackerhosp",
                    "busy",
                    "critical hit",
                    "attackerjail",
                    "escapefail",
                    "hit",
                    "hosp",
                    "joinfight",
                    "leave",
                    "loot",
                    "lost",
                    "missed",
                    "mug",
                    "noAmmo",
                    "onItemUseEff",
                    "opponenthosp",
                    "opponentjail",
                    "paralyzed",
                    "reload",
                    "runaway",
                    "specialTemp",
                    "specialTempI",
                    "stalemate",
                    "startfight",
                    "stunned",
                    "suppressed",
                    "timeout",
                    "won"
                ]
            },
            "TornItemAmmoTypeEnum": {
                "type": "string",
                "enum": [
                    "Standard",
                    "Hollow Point",
                    "Piercing",
                    "Tracer",
                    "Incendiary"
                ]
            },
            "TornItemWeaponTypeEnum": {
                "type": "string",
                "enum": [
                    "Heavy artillery",
                    "Machine gun",
                    "Pistol",
                    "Rifle",
                    "Shotgun",
                    "SMG",
                    "Temporary",
                    "Clubbing",
                    "Piercing",
                    "Slashing",
                    "Mechanical"
                ]
            },
            "TornItemWeaponCategoryEnum": {
                "type": "string",
                "enum": [
                    "Melee",
                    "Secondary",
                    "Primary",
                    "Temporary"
                ]
            },
            "TornItemTypeEnum": {
                "type": "string",
                "enum": [
                    "Alcohol",
                    "Armor",
                    "Artifact",
                    "Book",
                    "Booster",
                    "Candy",
                    "Car",
                    "Clothing",
                    "Collectible",
                    "Drug",
                    "Energy Drink",
                    "Enhancer",
                    "Flower",
                    "Jewelry",
                    "Material",
                    "Medical",
                    "Other",
                    "Plushie",
                    "Special",
                    "Supply Pack",
                    "Tool",
                    "Unused",
                    "Weapon"
                ]
            },
            "TornItemCategory": {
                "type": "string",
                "enum": [
                    "All",
                    "Alcohol",
                    "Armor",
                    "Artifact",
                    "Book",
                    "Booster",
                    "Candy",
                    "Car",
                    "Clothing",
                    "Collectible",
                    "Defensive",
                    "Drug",
                    "Energy Drink",
                    "Enhancer",
                    "Flower",
                    "Jewelry",
                    "Material",
                    "Medical",
                    "Melee",
                    "Other",
                    "Plushie",
                    "Primary",
                    "Secondary",
                    "Special",
                    "Supply Pack",
                    "Temporary",
                    "Tool",
                    "Unused",
                    "Weapon"
                ]
            },
            "TornItemArmorCoveragePartEnum": {
                "type": "string",
                "enum": [
                    "Full Body",
                    "Heart",
                    "Stomach",
                    "Chest",
                    "Arm",
                    "Groin",
                    "Leg",
                    "Throat",
                    "Hand",
                    "Foot",
                    "Head"
                ]
            },
            "AttackPlayerFaction": {
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AttackPlayer": {
                "required": [
                    "id",
                    "name",
                    "level",
                    "faction"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "faction": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AttackPlayerFaction"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "AttackPlayerSimplified": {
                "required": [
                    "id",
                    "faction_id"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "faction_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "AttackingFinishingHitEffects": {
                "required": [
                    "name",
                    "value"
                ],
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/AttackFinishingHitEffect"
                    },
                    "value": {
                        "description": "Advanced weapon bonus value in percentage.",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "Attack": {
                "required": [
                    "id",
                    "code",
                    "started",
                    "ended",
                    "attacker",
                    "defender",
                    "result",
                    "respect_gain",
                    "respect_loss",
                    "chain",
                    "is_interrupted",
                    "is_stealthed",
                    "is_raid",
                    "is_ranked_war",
                    "finishing_hit_effects",
                    "modifiers"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/AttackId"
                    },
                    "code": {
                        "$ref": "#/components/schemas/AttackCode"
                    },
                    "started": {
                        "description": "Attack start timestamp.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "ended": {
                        "description": "Attack end timestamp.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "attacker": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AttackPlayer"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "defender": {
                        "$ref": "#/components/schemas/AttackPlayer"
                    },
                    "result": {
                        "$ref": "#/components/schemas/FactionAttackResult"
                    },
                    "respect_gain": {
                        "type": "number",
                        "format": "float"
                    },
                    "respect_loss": {
                        "type": "number",
                        "format": "float"
                    },
                    "chain": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_interrupted": {
                        "description": "This is an experimental flag which should help determine 'assist' attacks which have not contributed to the chain. For example, attacks such as where the opponent lost to someoene else before the attacker could finish the attack. This flag might not work entirely correctly, so use with caution.",
                        "type": "boolean"
                    },
                    "is_stealthed": {
                        "type": "boolean"
                    },
                    "is_raid": {
                        "type": "boolean"
                    },
                    "is_ranked_war": {
                        "type": "boolean"
                    },
                    "finishing_hit_effects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttackingFinishingHitEffects"
                        }
                    },
                    "modifiers": {
                        "required": [
                            "fair_fight",
                            "war",
                            "retaliation",
                            "group",
                            "overseas",
                            "chain",
                            "warlord"
                        ],
                        "properties": {
                            "fair_fight": {
                                "type": "number",
                                "format": "float"
                            },
                            "war": {
                                "type": "number",
                                "format": "float"
                            },
                            "retaliation": {
                                "type": "number",
                                "format": "float"
                            },
                            "group": {
                                "type": "number",
                                "format": "float"
                            },
                            "overseas": {
                                "type": "number",
                                "format": "float"
                            },
                            "chain": {
                                "type": "number",
                                "format": "float"
                            },
                            "warlord": {
                                "type": "number",
                                "format": "float"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "AttackSimplified": {
                "required": [
                    "id",
                    "code",
                    "started",
                    "ended",
                    "attacker",
                    "defender",
                    "result",
                    "respect_gain",
                    "respect_loss"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/AttackId"
                    },
                    "code": {
                        "$ref": "#/components/schemas/AttackCode"
                    },
                    "started": {
                        "description": "Attack start timestamp.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "ended": {
                        "description": "Attack end timestamp.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "attacker": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AttackPlayerSimplified"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "defender": {
                        "$ref": "#/components/schemas/AttackPlayerSimplified"
                    },
                    "result": {
                        "$ref": "#/components/schemas/FactionAttackResult"
                    },
                    "respect_gain": {
                        "type": "number",
                        "format": "float"
                    },
                    "respect_loss": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "ReviveSimplified": {
                "required": [
                    "id",
                    "reviver",
                    "target",
                    "success_chance",
                    "result",
                    "timestamp"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ReviveId"
                    },
                    "reviver": {
                        "required": [
                            "id",
                            "faction_id"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/UserId"
                            },
                            "faction_id": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/FactionId"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "target": {
                        "required": [
                            "id",
                            "faction_id",
                            "hospital_reason",
                            "early_discharge",
                            "last_action",
                            "online_status"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/UserId"
                            },
                            "faction_id": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/FactionId"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "hospital_reason": {
                                "type": "string"
                            },
                            "early_discharge": {
                                "type": "boolean"
                            },
                            "last_action": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "online_status": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "success_chance": {
                        "type": "number",
                        "format": "float"
                    },
                    "result": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "Revive": {
                "required": [
                    "id",
                    "reviver",
                    "target",
                    "success_chance",
                    "result",
                    "timestamp"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ReviveId"
                    },
                    "reviver": {
                        "required": [
                            "id",
                            "name",
                            "faction"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/UserId"
                            },
                            "name": {
                                "type": "string"
                            },
                            "faction": {
                                "oneOf": [
                                    {
                                        "required": [
                                            "id",
                                            "name"
                                        ],
                                        "properties": {
                                            "id": {
                                                "$ref": "#/components/schemas/FactionId"
                                            },
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "target": {
                        "required": [
                            "id",
                            "name",
                            "faction",
                            "hospital_reason",
                            "early_discharge",
                            "last_action",
                            "online_status"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/UserId"
                            },
                            "name": {
                                "type": "string"
                            },
                            "faction": {
                                "oneOf": [
                                    {
                                        "required": [
                                            "id",
                                            "name"
                                        ],
                                        "properties": {
                                            "id": {
                                                "$ref": "#/components/schemas/FactionId"
                                            },
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "hospital_reason": {
                                "type": "string"
                            },
                            "early_discharge": {
                                "type": "boolean"
                            },
                            "last_action": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "online_status": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "success_chance": {
                        "type": "number",
                        "format": "float"
                    },
                    "result": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "RevivesResponse": {
                "required": [
                    "revives",
                    "_metadata"
                ],
                "properties": {
                    "revives": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Revive"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "RevivesFullResponse": {
                "required": [
                    "revives",
                    "_metadata"
                ],
                "properties": {
                    "revives": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReviveSimplified"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "TimestampResponse": {
                "required": [
                    "timestamp"
                ],
                "properties": {
                    "timestamp": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarFinishedFaction": {
                "required": [
                    "id",
                    "name",
                    "score",
                    "is_aggressor"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_aggressor": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarFinished": {
                "required": [
                    "id",
                    "territory",
                    "start",
                    "end",
                    "target",
                    "result",
                    "factions"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TerritoryWarId"
                    },
                    "territory": {
                        "$ref": "#/components/schemas/FactionTerritoryEnum"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "end": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "target": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "result": {
                        "$ref": "#/components/schemas/FactionTerritoryWarResultEnum"
                    },
                    "factions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWarFinishedFaction"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarOngoingFaction": {
                "required": [
                    "id",
                    "name",
                    "score",
                    "is_aggressor",
                    "chain",
                    "playerIds"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_aggressor": {
                        "type": "boolean"
                    },
                    "chain": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "playerIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarOngoing": {
                "required": [
                    "id",
                    "territory",
                    "start",
                    "end",
                    "target",
                    "factions"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TerritoryWarId"
                    },
                    "territory": {
                        "$ref": "#/components/schemas/FactionTerritoryEnum"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "target": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "factions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWarOngoingFaction"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarsResponse": {
                "required": [
                    "territorywars"
                ],
                "properties": {
                    "territorywars": {
                        "description": "If the chosen category is 'ongoing' the response will be of 'FactionTerritoryWarOngoing' type, otherwise, the type will be 'FactionTerritoryWarFinished'.",
                        "oneOf": [
                            {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FactionTerritoryWarOngoing"
                                }
                            },
                            {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FactionTerritoryWarFinished"
                                }
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarsHistoryResponse": {
                "required": [
                    "territorywars"
                ],
                "properties": {
                    "territorywars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWarFinished"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarReportMembers": {
                "required": [
                    "id",
                    "username",
                    "level",
                    "score",
                    "joins",
                    "clears"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "username": {
                        "type": "string"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "joins": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "clears": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarReportFaction": {
                "required": [
                    "id",
                    "name",
                    "score",
                    "joins",
                    "clears",
                    "is_aggressor",
                    "members"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "joins": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "clears": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_aggressor": {
                        "type": "boolean"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWarReportMembers"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarReport": {
                "required": [
                    "id",
                    "territory",
                    "started_at",
                    "ended_at",
                    "winner",
                    "result",
                    "factions"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TerritoryWarId"
                    },
                    "territory": {
                        "$ref": "#/components/schemas/FactionTerritoryEnum"
                    },
                    "started_at": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ended_at": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "winner": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "result": {
                        "type": "string"
                    },
                    "factions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWarReportFaction"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarReportResponse": {
                "required": [
                    "territorywarreport"
                ],
                "properties": {
                    "territorywarreport": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWarReport"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryOwnership": {
                "required": [
                    "id",
                    "owned_by",
                    "acquired_at"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "owned_by": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "acquired_at": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "FactionTerritoriesOwnershipResponse": {
                "required": [
                    "territoryownership"
                ],
                "properties": {
                    "territoryownership": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryOwnership"
                        }
                    }
                },
                "type": "object"
            },
            "TornRacketReward": {
                "required": [
                    "type",
                    "quantity",
                    "id"
                ],
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TornRacketType"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ItemId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "TornRacket": {
                "required": [
                    "name",
                    "level",
                    "description",
                    "reward",
                    "created_at",
                    "changed_at"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "type": "string"
                    },
                    "reward": {
                        "$ref": "#/components/schemas/TornRacketReward"
                    },
                    "created_at": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changed_at": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionRacketsReponse": {
                "required": [
                    "rackets"
                ],
                "properties": {
                    "rackets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornRacket"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritory": {
                "required": [
                    "id",
                    "acquired_at",
                    "sector",
                    "size",
                    "density",
                    "slots",
                    "respect",
                    "coordinates",
                    "racket"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionTerritoryEnum"
                    },
                    "acquired_at": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sector": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "density": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "slots": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "respect": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/TornTerritoryCoordinates"
                    },
                    "racket": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TornRacket"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "FactionTerritoriesReponse": {
                "required": [
                    "territory"
                ],
                "properties": {
                    "territory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritory"
                        }
                    }
                },
                "type": "object"
            },
            "FactionPosition": {
                "required": [
                    "name",
                    "is_default",
                    "abilities"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "is_default": {
                        "type": "boolean"
                    },
                    "abilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionPositionAbilityEnum"
                        }
                    }
                },
                "type": "object"
            },
            "FactionPositionsResponse": {
                "required": [
                    "positions"
                ],
                "properties": {
                    "positions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionPosition"
                        }
                    }
                },
                "type": "object"
            },
            "FactionUpgradeDetails": {
                "required": [
                    "id",
                    "name",
                    "ability",
                    "level",
                    "cost",
                    "unlockedAt"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionBranchId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ability": {
                        "type": "string"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "cost": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "unlocked_at": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionBranchDetails": {
                "required": [
                    "name",
                    "order",
                    "multiplier",
                    "upgrades"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "order": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "multiplier": {
                        "description": "Respect cost multiplier.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "upgrades": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionUpgradeDetails"
                        }
                    }
                },
                "type": "object"
            },
            "FactionUpgrades": {
                "required": [
                    "core",
                    "peace",
                    "war"
                ],
                "properties": {
                    "core": {
                        "properties": {
                            "upgrades": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FactionUpgradeDetails"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "peace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionBranchDetails"
                        }
                    },
                    "war": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionBranchDetails"
                        }
                    }
                },
                "type": "object"
            },
            "FactionUpgradesResponse": {
                "required": [
                    "upgrades",
                    "state"
                ],
                "properties": {
                    "upgrades": {
                        "$ref": "#/components/schemas/FactionUpgrades"
                    },
                    "state": {
                        "$ref": "#/components/schemas/FactionBranchStateEnum"
                    }
                },
                "type": "object"
            },
            "FactionStat": {
                "required": [
                    "name",
                    "value"
                ],
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/FactionStatEnum"
                    },
                    "value": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "type": "object"
            },
            "FactionStatsResponse": {
                "required": [
                    "stats"
                ],
                "properties": {
                    "stats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionStat"
                        }
                    }
                },
                "type": "object"
            },
            "FactionContributor": {
                "required": [
                    "id",
                    "username",
                    "value",
                    "in_faction"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "username": {
                        "type": "string"
                    },
                    "value": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "in_faction": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "FactionContributorsResponse": {
                "required": [
                    "contributors"
                ],
                "properties": {
                    "contributors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionContributor"
                        }
                    }
                },
                "type": "object"
            },
            "FactionHofStats": {
                "required": [
                    "rank",
                    "respect",
                    "chain"
                ],
                "properties": {
                    "rank": {
                        "$ref": "#/components/schemas/HofValueString"
                    },
                    "respect": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/HofValue"
                    }
                },
                "type": "object"
            },
            "FactionHofResponse": {
                "required": [
                    "hof"
                ],
                "properties": {
                    "hof": {
                        "$ref": "#/components/schemas/FactionHofStats"
                    }
                },
                "type": "object"
            },
            "FactionMember": {
                "description": "Details about a faction member.",
                "required": [
                    "id",
                    "name",
                    "position",
                    "level",
                    "days_in_faction",
                    "is_revivable",
                    "is_on_wall",
                    "is_in_oc",
                    "has_early_discharge",
                    "last_action",
                    "status",
                    "revive_setting"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "position": {
                        "type": "string"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "days_in_faction": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_revivable": {
                        "type": "boolean"
                    },
                    "is_on_wall": {
                        "description": "Shows if the member is currently defending territory wall.",
                        "type": "boolean"
                    },
                    "is_in_oc": {
                        "description": "Shows if the member is currently participating in an organized crime. Show false for members of other factions.",
                        "type": "boolean"
                    },
                    "has_early_discharge": {
                        "description": "Shows if the member is eligible for an early discharge from the hospital.",
                        "type": "boolean"
                    },
                    "last_action": {
                        "$ref": "#/components/schemas/UserLastAction"
                    },
                    "status": {
                        "$ref": "#/components/schemas/UserStatus"
                    },
                    "life": {
                        "$ref": "#/components/schemas/UserLife"
                    },
                    "revive_setting": {
                        "$ref": "#/components/schemas/ReviveSetting"
                    }
                },
                "type": "object"
            },
            "UserLastAction": {
                "description": "Details about a user's last action.",
                "required": [
                    "status",
                    "timestamp",
                    "relative"
                ],
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "relative": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserLife": {
                "description": "Unfortunately, current life value is often shown incorrectly, and the calculation for each member is very resource heavy, so this field is deprecated and will be removed on 1st of May, 2025.",
                "properties": {
                    "current": {
                        "type": "integer",
                        "format": "int32",
                        "deprecated": true
                    },
                    "maximum": {
                        "type": "integer",
                        "format": "int32",
                        "deprecated": true
                    }
                },
                "type": "object",
                "deprecated": true
            },
            "UserStatus": {
                "description": "Details about a user's status.",
                "required": [
                    "description",
                    "details",
                    "state",
                    "until"
                ],
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "state": {
                        "type": "string"
                    },
                    "until": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "FactionMembersResponse": {
                "required": [
                    "members"
                ],
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionMember"
                        }
                    }
                },
                "type": "object"
            },
            "FactionRank": {
                "required": [
                    "level",
                    "name",
                    "division",
                    "position",
                    "wins"
                ],
                "properties": {
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "division": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "wins": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionBasic": {
                "required": [
                    "id",
                    "name",
                    "tag",
                    "tag_image",
                    "leader_id",
                    "co_leader_id",
                    "respect",
                    "days_old",
                    "capacity",
                    "members",
                    "is_enlisted",
                    "rank",
                    "best_chain"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "tag_image": {
                        "type": "string"
                    },
                    "leader_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "co-leader_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "co_leader_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "respect": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "days_old": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "capacity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "members": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_enlisted": {
                        "description": "Indicates if the faction is enlisted for ranked wars. Available only with faction AA permissions for your own faction.",
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "rank": {
                        "$ref": "#/components/schemas/FactionRank"
                    },
                    "best_chain": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionBasicResponse": {
                "required": [
                    "basic"
                ],
                "properties": {
                    "basic": {
                        "$ref": "#/components/schemas/FactionBasic"
                    }
                },
                "type": "object"
            },
            "FactionPact": {
                "required": [
                    "faction_id",
                    "faction_name",
                    "until"
                ],
                "properties": {
                    "faction_id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "faction_name": {
                        "type": "string"
                    },
                    "until": {
                        "description": "The duration until when is the non-aggression pact valid.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FactionRankedWarParticipant": {
                "required": [
                    "id",
                    "name",
                    "score",
                    "chain"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "chain": {
                        "description": "Faction's current chain.",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionRankedWar": {
                "required": [
                    "war_id",
                    "start",
                    "end",
                    "target",
                    "winner",
                    "factions"
                ],
                "properties": {
                    "war_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "target": {
                        "description": "The score target of the war.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "winner": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "factions": {
                        "description": "The factions involved in the ranked war.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionRankedWarParticipant"
                        }
                    }
                },
                "type": "object"
            },
            "FactionRaidWarParticipant": {
                "required": [
                    "id",
                    "name",
                    "score",
                    "chain",
                    "is_aggressor"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "chain": {
                        "description": "Faction's current chain.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_aggressor": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "FactionRaidWar": {
                "required": [
                    "war_id",
                    "start",
                    "end",
                    "factions"
                ],
                "properties": {
                    "war_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "factions": {
                        "description": "The factions involved in the raid war.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionRaidWarParticipant"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWarParticipant": {
                "required": [
                    "id",
                    "name",
                    "score",
                    "chain",
                    "is_aggressor",
                    "playerIds"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "chain": {
                        "description": "Faction's current chain.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_aggressor": {
                        "type": "boolean"
                    },
                    "playerIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    }
                },
                "type": "object"
            },
            "FactionTerritoryWar": {
                "required": [
                    "war_id",
                    "territory",
                    "start",
                    "end",
                    "target",
                    "factions"
                ],
                "properties": {
                    "war_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "territory": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "target": {
                        "description": "The score target of the war.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "winner": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "factions": {
                        "description": "The factions involved in the territory war.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWarParticipant"
                        }
                    }
                },
                "type": "object"
            },
            "FactionWars": {
                "required": [
                    "ranked",
                    "raids",
                    "territory"
                ],
                "properties": {
                    "ranked": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionRankedWar"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "raids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionRaidWar"
                        }
                    },
                    "territory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryWar"
                        }
                    }
                },
                "type": "object"
            },
            "FactionWarsResponse": {
                "required": [
                    "pacts",
                    "wars"
                ],
                "properties": {
                    "pacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionPact"
                        }
                    },
                    "wars": {
                        "$ref": "#/components/schemas/FactionWars"
                    }
                },
                "type": "object"
            },
            "FactionNews": {
                "required": [
                    "id",
                    "text",
                    "timestamp"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionNewsResponse": {
                "required": [
                    "news",
                    "_metadata"
                ],
                "properties": {
                    "news": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionNews"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "FactionAttacksResponse": {
                "required": [
                    "attacks",
                    "_metadata"
                ],
                "properties": {
                    "attacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attack"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "FactionAttacksFullResponse": {
                "required": [
                    "attacks",
                    "_metadata"
                ],
                "properties": {
                    "attacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttackSimplified"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "FactionApplication": {
                "required": [
                    "id",
                    "user",
                    "message",
                    "valid_until",
                    "status"
                ],
                "properties": {
                    "id": {
                        "description": "application id",
                        "type": "integer",
                        "format": "int32"
                    },
                    "user": {
                        "required": [
                            "id",
                            "name",
                            "level",
                            "stats"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/UserId"
                            },
                            "name": {
                                "type": "string"
                            },
                            "level": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "stats": {
                                "required": [
                                    "strength",
                                    "speed",
                                    "dexterity",
                                    "defense"
                                ],
                                "properties": {
                                    "strength": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "speed": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "dexterity": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "defense": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "message": {
                        "type": "string"
                    },
                    "valid_until": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "status": {
                        "$ref": "#/components/schemas/FactionApplicationStatusEnum"
                    }
                },
                "type": "object"
            },
            "FactionApplicationsResponse": {
                "required": [
                    "applications"
                ],
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionApplication"
                        }
                    }
                },
                "type": "object"
            },
            "FactionOngoingChain": {
                "required": [
                    "id",
                    "current",
                    "max",
                    "timeout",
                    "modifier",
                    "cooldown",
                    "start",
                    "end"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ChainId"
                    },
                    "current": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "max": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timeout": {
                        "description": "Seconds until chain breaks.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "modifier": {
                        "type": "number",
                        "format": "float"
                    },
                    "cooldown": {
                        "description": "Timestamp until when chain is on cooldown.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionOngoingChainResponse": {
                "required": [
                    "chain"
                ],
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/FactionOngoingChain"
                    }
                },
                "type": "object"
            },
            "FactionChain": {
                "required": [
                    "id",
                    "chain",
                    "respect",
                    "start",
                    "end"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ChainId"
                    },
                    "chain": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "respect": {
                        "type": "number",
                        "format": "float"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionChainsResponse": {
                "required": [
                    "chains",
                    "_metadata"
                ],
                "properties": {
                    "chains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionChain"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "FactionChainReportResponse": {
                "required": [
                    "chainreport"
                ],
                "properties": {
                    "chainreport": {
                        "$ref": "#/components/schemas/FactionChainReport"
                    }
                },
                "type": "object"
            },
            "FactionChainReport": {
                "required": [
                    "id",
                    "faction_id",
                    "start",
                    "end",
                    "details",
                    "bonuses",
                    "attackers",
                    "non_attackers"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ChainId"
                    },
                    "faction_id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "details": {
                        "$ref": "#/components/schemas/FactionChainReportDetails"
                    },
                    "bonuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionChainReportBonus"
                        }
                    },
                    "attackers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionChainReportAttacker"
                        }
                    },
                    "non-attackers": {
                        "description": "This is replaced with 'sci_fi' field and will be removed on 1st June 2025.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        },
                        "deprecated": true
                    },
                    "non_attackers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserId"
                        }
                    }
                },
                "type": "object"
            },
            "FactionChainReportDetails": {
                "required": [
                    "chain",
                    "respect",
                    "members",
                    "targets",
                    "war",
                    "best",
                    "leave",
                    "mug",
                    "hospitalize",
                    "assists",
                    "retaliations",
                    "overseas",
                    "draws",
                    "escapes",
                    "losses"
                ],
                "properties": {
                    "chain": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "respect": {
                        "type": "number",
                        "format": "float"
                    },
                    "members": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "targets": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "war": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "best": {
                        "type": "number",
                        "format": "float"
                    },
                    "leave": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "mug": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hospitalize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "assists": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "retaliations": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "overseas": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "draws": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "escapes": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "losses": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionChainReportBonus": {
                "required": [
                    "attacker_id",
                    "defender_id",
                    "chain",
                    "respect"
                ],
                "properties": {
                    "attacker_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "defender_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "chain": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "respect": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionChainReportAttacker": {
                "required": [
                    "id",
                    "respect",
                    "attacks"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "respect": {
                        "$ref": "#/components/schemas/FactionChainReportAttackerRespect"
                    },
                    "attacks": {
                        "$ref": "#/components/schemas/FactionChainReportAttackerAttacks"
                    }
                },
                "type": "object"
            },
            "FactionChainReportAttackerRespect": {
                "required": [
                    "total",
                    "average",
                    "best"
                ],
                "properties": {
                    "total": {
                        "type": "number",
                        "format": "float"
                    },
                    "average": {
                        "type": "number",
                        "format": "float"
                    },
                    "best": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "FactionChainReportAttackerAttacks": {
                "required": [
                    "total",
                    "leave",
                    "mug",
                    "hospitalize",
                    "assists",
                    "retaliations",
                    "overseas",
                    "draws",
                    "escpaces",
                    "losses",
                    "war",
                    "bonuses"
                ],
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "leave": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "mug": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hospitalize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "assists": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "retaliations": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "overseas": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "draws": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "escapes": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "losses": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "war": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "bonuses": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionCrimeUser": {
                "required": [
                    "id",
                    "outcome",
                    "joined_at",
                    "progress"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "outcome": {
                        "description": "This field will be null for old crimes.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionCrimeUserOutcome"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "joined_at": {
                        "description": "The timestamp at which the user joined the slot.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "progress": {
                        "description": "Current planning progress on the slot.",
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "FactionCrimeRewardItem": {
                "required": [
                    "id",
                    "quantity"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ItemId"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionCrimeRewardPayout": {
                "required": [
                    "type",
                    "percentage",
                    "paid_by",
                    "paid_at"
                ],
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/FactionOrganizedCrimePayoutType"
                    },
                    "percentage": {
                        "description": "Total percentage split between all participants.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "paid_by": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "paid_at": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionCrimeReward": {
                "required": [
                    "money",
                    "items",
                    "respect",
                    "payout",
                    "scope"
                ],
                "properties": {
                    "money": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionCrimeRewardItem"
                        }
                    },
                    "respect": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "scope": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "payout": {
                        "description": "Details about the crime payouts. This field is null if the crime has not been paid via the automatic payouts system.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionCrimeRewardPayout"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "FactionCrimeSlot": {
                "required": [
                    "position",
                    "item_requirement",
                    "user",
                    "checkpoint_pass_rate"
                ],
                "properties": {
                    "position": {
                        "type": "string"
                    },
                    "item_requirement": {
                        "description": "Details of item required for the slot, if applicable.",
                        "oneOf": [
                            {
                                "required": [
                                    "id",
                                    "is_reusable",
                                    "is_available"
                                ],
                                "properties": {
                                    "id": {
                                        "$ref": "#/components/schemas/ItemId"
                                    },
                                    "is_reusable": {
                                        "description": "Shows if the item is reusable or consumed during the crime.",
                                        "type": "boolean"
                                    },
                                    "is_available": {
                                        "description": "Shows if user has the required item.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "user_id": {
                        "description": "This field is replaced with the 'user.id' and will be removed on the 1st of May 2025.",
                        "deprecated": true,
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "user": {
                        "description": "Details about the user joined the slot, if any.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionCrimeUser"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "success_chance": {
                        "description": "This field is replaced with 'checkpoint_pass_rate' field and will be removed on 1st of May 2025.",
                        "type": "integer",
                        "format": "int32",
                        "deprecated": true
                    },
                    "crime_pass_rate": {
                        "description": "This field is replaced with 'checkpoint_pass_rate' field and will be removed on 1st of May 2025.",
                        "type": "integer",
                        "format": "int32",
                        "deprecated": true
                    },
                    "checkpoint_pass_rate": {
                        "description": "Returns CPR for the player who joined the slot. If the slot is empty (availalbe), it shows your CPR for that slot. This value is 0 for expired crimes.",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "FactionCrime": {
                "required": [
                    "id",
                    "name",
                    "previous_crime_id",
                    "difficulty",
                    "status",
                    "created_at",
                    "planning_at",
                    "ready_at",
                    "expired_at",
                    "executed_at",
                    "slots",
                    "rewards"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionCrimeId"
                    },
                    "previous_crime_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionCrimeId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "difficulty": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "status": {
                        "$ref": "#/components/schemas/FactionCrimeStatusEnum"
                    },
                    "created_at": {
                        "description": "The timestamp at which the crime was created.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "planning_at": {
                        "description": "The timestamp at which the planning phase for the crime has begun.",
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "ready_at": {
                        "description": "The timestamp at which the crime will be ready.",
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "expired_at": {
                        "description": "The timestamp at which the crime will expire.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "executed_at": {
                        "description": "The timestamp at which the crime was executed. <br> Note: this value is null for all crimes executed before January 15th, 2025.",
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "slots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionCrimeSlot"
                        }
                    },
                    "rewards": {
                        "description": "Details about the crime rewards. Available only for crimes with 'Successful' status.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionCrimeReward"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "FactionCrimesResponse": {
                "required": [
                    "crimes",
                    "_metadata"
                ],
                "properties": {
                    "crimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionCrime"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "FactionCrimeResponse": {
                "required": [
                    "crime"
                ],
                "properties": {
                    "crime": {
                        "$ref": "#/components/schemas/FactionCrime"
                    }
                },
                "type": "object"
            },
            "FactionBalance": {
                "required": [
                    "faction",
                    "members"
                ],
                "properties": {
                    "faction": {
                        "required": [
                            "money",
                            "points",
                            "scope"
                        ],
                        "properties": {
                            "money": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "points": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "scope": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "required": [
                                "id",
                                "username",
                                "money",
                                "points"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/UserId"
                                },
                                "username": {
                                    "type": "string"
                                },
                                "money": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "points": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "FactionBalanceResponse": {
                "required": [
                    "balance"
                ],
                "properties": {
                    "balance": {
                        "$ref": "#/components/schemas/FactionBalance"
                    }
                },
                "type": "object"
            },
            "FactionSelectionName": {
                "description": "The following selections will fallback to API v1 and may change at any time: 'armor', 'boosters', 'caches', 'cesium', 'crimeexp', 'drugs', 'medical', 'positions', 'reports', 'temporary', 'weapons'.\n * The following selections are not available in API v2: 'armorynews', 'attacknews', 'crimenews', 'currency', 'donations', 'fundsnews', 'mainnews', 'membershipnews', 'territorynews'.",
                "type": "string",
                "enum": [
                    "applications",
                    "attacks",
                    "attacksfull",
                    "balance",
                    "basic",
                    "chain",
                    "chainreport",
                    "chains",
                    "contributors",
                    "crime",
                    "crimes",
                    "hof",
                    "lookup",
                    "members",
                    "news",
                    "rackets",
                    "rankedwars",
                    "rankedwarreport",
                    "revives",
                    "revivesfull",
                    "stats",
                    "territory",
                    "territoryownership",
                    "territorywarreport",
                    "territorywars",
                    "timestamp",
                    "upgrades",
                    "wars",
                    "armor",
                    "boosters",
                    "caches",
                    "cesium",
                    "crimeexp",
                    "drugs",
                    "medical",
                    "positions",
                    "reports",
                    "temporary",
                    "weapons",
                    "armorynews",
                    "attacknews",
                    "crimenews",
                    "currency",
                    "donations",
                    "fundsnews",
                    "mainnews",
                    "membershipnews",
                    "territorynews"
                ]
            },
            "FactionLookupResponse": {
                "required": [
                    "selections"
                ],
                "properties": {
                    "selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionSelectionName"
                        }
                    }
                },
                "type": "object"
            },
            "FactionRankedWarDetails": {
                "required": [
                    "id",
                    "start",
                    "end",
                    "target",
                    "winner",
                    "factions"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/RankedWarId"
                    },
                    "start": {
                        "description": "Timestamp the war started at.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "description": "Timestamp the war ended at.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "target": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "winner": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "factions": {
                        "type": "array",
                        "items": {
                            "required": [
                                "id",
                                "name",
                                "score",
                                "chain"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/FactionId"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "score": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "chain": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "FactionRankedWarResponse": {
                "required": [
                    "rankedwars",
                    "_metadata"
                ],
                "properties": {
                    "rankedwars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionRankedWarDetails"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "FactionRankedWarReportResponse": {
                "required": [
                    "rankedwarreport"
                ],
                "properties": {
                    "rankedwarreport": {
                        "required": [
                            "id",
                            "start",
                            "end",
                            "winner",
                            "forfeit",
                            "factions"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/RankedWarId"
                            },
                            "start": {
                                "description": "Timestamp the war started at.",
                                "type": "integer",
                                "format": "int32"
                            },
                            "end": {
                                "description": "Timestamp the war ended at.",
                                "type": "integer",
                                "format": "int32"
                            },
                            "winner": {
                                "$ref": "#/components/schemas/FactionId"
                            },
                            "forfeit": {
                                "type": "boolean"
                            },
                            "factions": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "id",
                                        "name",
                                        "score",
                                        "attacks",
                                        "rank",
                                        "rewards",
                                        "members"
                                    ],
                                    "properties": {
                                        "id": {
                                            "$ref": "#/components/schemas/FactionId"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "score": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "attacks": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "rank": {
                                            "required": [
                                                "before",
                                                "after"
                                            ],
                                            "properties": {
                                                "before": {
                                                    "type": "string"
                                                },
                                                "after": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "rewards": {
                                            "required": [
                                                "respect",
                                                "points",
                                                "items"
                                            ],
                                            "properties": {
                                                "respect": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                },
                                                "points": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                },
                                                "items": {
                                                    "type": "array",
                                                    "items": {
                                                        "required": [
                                                            "id",
                                                            "name",
                                                            "quantity"
                                                        ],
                                                        "properties": {
                                                            "id": {
                                                                "$ref": "#/components/schemas/ItemId"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "quantity": {
                                                                "type": "integer",
                                                                "format": "int32"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "members": {
                                            "type": "array",
                                            "items": {
                                                "required": [
                                                    "id",
                                                    "name",
                                                    "level",
                                                    "attacks",
                                                    "score"
                                                ],
                                                "properties": {
                                                    "id": {
                                                        "$ref": "#/components/schemas/UserId"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "level": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "attacks": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "score": {
                                                        "type": "number",
                                                        "format": "float"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ForumCategoriesResponse": {
                "required": [
                    "categories"
                ],
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "required": [
                                "id",
                                "title",
                                "acronym",
                                "threads"
                            ],
                            "properties": {
                                "id": {
                                    "$ref": "#/components/schemas/ForumId"
                                },
                                "title": {
                                    "type": "string"
                                },
                                "acronym": {
                                    "type": "string"
                                },
                                "threads": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "ForumThreadAuthor": {
                "required": [
                    "id",
                    "username",
                    "karma"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "username": {
                        "type": "string"
                    },
                    "karma": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "ForumPollVote": {
                "required": [
                    "answer",
                    "votes"
                ],
                "properties": {
                    "answer": {
                        "type": "string"
                    },
                    "votes": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "ForumPoll": {
                "required": [
                    "question",
                    "answers_count",
                    "answers"
                ],
                "properties": {
                    "question": {
                        "type": "string"
                    },
                    "answers_count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumPollVote"
                        }
                    }
                },
                "type": "object"
            },
            "ForumThreadBase": {
                "required": [
                    "id",
                    "title",
                    "forum_id",
                    "posts",
                    "rating",
                    "views",
                    "author",
                    "last_poster",
                    "first_post_time",
                    "last_post_time",
                    "has_poll",
                    "is_locked",
                    "is_sticky"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ForumThreadId"
                    },
                    "title": {
                        "type": "string"
                    },
                    "forum_id": {
                        "$ref": "#/components/schemas/ForumId"
                    },
                    "posts": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rating": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "views": {
                        "description": "Total number of times players have opened this thread.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "author": {
                        "$ref": "#/components/schemas/ForumThreadAuthor"
                    },
                    "last_poster": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ForumThreadAuthor"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "first_post_time": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "last_post_time": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "has_poll": {
                        "type": "boolean"
                    },
                    "is_locked": {
                        "type": "boolean"
                    },
                    "is_sticky": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ForumThreadExtended": {
                "allOf": [
                    {
                        "required": [
                            "content",
                            "content_raw",
                            "poll"
                        ],
                        "properties": {
                            "content": {
                                "type": "string"
                            },
                            "content_raw": {
                                "type": "string"
                            },
                            "poll": {
                                "description": "'poll' is null when 'has_poll' is false.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/ForumPoll"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/ForumThreadBase"
                    }
                ]
            },
            "ForumPost": {
                "required": [
                    "id",
                    "thread_id",
                    "author",
                    "is_legacy",
                    "is_topic",
                    "is_edited",
                    "is_pinned",
                    "created_time",
                    "edited_by",
                    "has_quote",
                    "quoted_post_id",
                    "content",
                    "likes",
                    "dislikes"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ForumPostId"
                    },
                    "thread_id": {
                        "$ref": "#/components/schemas/ForumThreadId"
                    },
                    "author": {
                        "$ref": "#/components/schemas/ForumThreadAuthor"
                    },
                    "is_legacy": {
                        "description": "Indicates whether post was made using the old formatting engine which doesn't use HTML.",
                        "type": "boolean"
                    },
                    "is_topic": {
                        "type": "boolean"
                    },
                    "is_edited": {
                        "type": "boolean"
                    },
                    "is_pinned": {
                        "type": "boolean"
                    },
                    "created_time": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "edited_by": {
                        "description": "'edited_by' is null when 'is_edited' is false.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "has_quote": {
                        "type": "boolean"
                    },
                    "quoted_post_id": {
                        "description": "'quoted_post_id' is null when 'has_quote' is false.",
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "content": {
                        "description": "depending on the input 'cat' parameter, this will either return raw value (with HTML) or plain text. Legacy posts are returned as is, they can't be stripped of tags.",
                        "type": "string"
                    },
                    "likes": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "dislikes": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "ForumThreadUserExtended": {
                "allOf": [
                    {
                        "required": [
                            "new_posts"
                        ],
                        "properties": {
                            "new_posts": {
                                "description": "Available only when requesting data for yourself (no id or your id) with at least 'Minimal' access type key.",
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/ForumThreadBase"
                    }
                ]
            },
            "ForumSubscribedThreadPostsCount": {
                "required": [
                    "new",
                    "total"
                ],
                "properties": {
                    "new": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "ForumSubscribedThread": {
                "required": [
                    "id",
                    "forum_id",
                    "author",
                    "title",
                    "posts"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ForumThreadId"
                    },
                    "forum_id": {
                        "$ref": "#/components/schemas/ForumId"
                    },
                    "author": {
                        "$ref": "#/components/schemas/ForumThreadAuthor"
                    },
                    "title": {
                        "type": "string"
                    },
                    "posts": {
                        "$ref": "#/components/schemas/ForumSubscribedThreadPostsCount"
                    }
                },
                "type": "object"
            },
            "ForumFeed": {
                "required": [
                    "thread_id",
                    "post_id",
                    "user",
                    "title",
                    "text",
                    "timestamp",
                    "is_seen",
                    "type"
                ],
                "properties": {
                    "thread_id": {
                        "$ref": "#/components/schemas/ForumThreadId"
                    },
                    "post_id": {
                        "$ref": "#/components/schemas/ForumPostId"
                    },
                    "user": {
                        "$ref": "#/components/schemas/ForumThreadAuthor"
                    },
                    "title": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_seen": {
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ForumFeedTypeEnum"
                    }
                },
                "type": "object"
            },
            "ForumThreadsResponse": {
                "required": [
                    "threads",
                    "_metadata"
                ],
                "properties": {
                    "threads": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumThreadBase"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "ForumThreadResponse": {
                "required": [
                    "thread"
                ],
                "properties": {
                    "thread": {
                        "$ref": "#/components/schemas/ForumThreadExtended"
                    }
                },
                "type": "object"
            },
            "ForumPostsResponse": {
                "required": [
                    "posts",
                    "_metadata"
                ],
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumPost"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "ForumSelectionName": {
                "type": "string",
                "enum": [
                    "categories",
                    "lookup",
                    "posts",
                    "thread",
                    "threads",
                    "timestamp"
                ]
            },
            "ForumLookupResponse": {
                "required": [
                    "selections"
                ],
                "properties": {
                    "selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumSelectionName"
                        }
                    }
                },
                "type": "object"
            },
            "KeyLogResponse": {
                "required": [
                    "log"
                ],
                "properties": {
                    "log": {
                        "type": "array",
                        "items": {
                            "required": [
                                "timestamp",
                                "type",
                                "selections",
                                "id",
                                "ip"
                            ],
                            "properties": {
                                "timestamp": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "type": {
                                    "type": "string"
                                },
                                "selections": {
                                    "type": "string"
                                },
                                "id": {
                                    "oneOf": [
                                        {
                                            "type": "integer",
                                            "format": "int64"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                },
                                "ip": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "KeyInfoResponse": {
                "required": [
                    "info"
                ],
                "properties": {
                    "info": {
                        "required": [
                            "selections",
                            "access"
                        ],
                        "properties": {
                            "selections": {
                                "required": [
                                    "company",
                                    "faction",
                                    "market",
                                    "property",
                                    "torn",
                                    "user",
                                    "racing",
                                    "forum",
                                    "key"
                                ],
                                "properties": {
                                    "company": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "faction": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/FactionSelectionName"
                                        }
                                    },
                                    "market": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/MarketSelectionName"
                                        }
                                    },
                                    "property": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "torn": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/TornSelectionName"
                                        }
                                    },
                                    "user": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/UserSelectionName"
                                        }
                                    },
                                    "racing": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/RacingSelectionName"
                                        }
                                    },
                                    "forum": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ForumSelectionName"
                                        }
                                    },
                                    "key": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/KeySelectionName"
                                        }
                                    }
                                },
                                "type": "object"
                            },
                            "access": {
                                "required": [
                                    "level",
                                    "type",
                                    "faction",
                                    "company"
                                ],
                                "properties": {
                                    "level": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "type": {
                                        "$ref": "#/components/schemas/ApiKeyAccessTypeEnum"
                                    },
                                    "faction": {
                                        "type": "boolean"
                                    },
                                    "faction_id": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/FactionId"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    "company": {
                                        "type": "boolean"
                                    },
                                    "company_id": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/CompanyId"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "KeySelectionName": {
                "type": "string",
                "enum": [
                    "info",
                    "log"
                ]
            },
            "ItemMarketListingItemBonus": {
                "required": [
                    "id",
                    "title",
                    "description",
                    "value"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "ItemMarketListingItemStats": {
                "required": [
                    "damage",
                    "accuracy",
                    "armor",
                    "quality"
                ],
                "properties": {
                    "damage": {
                        "oneOf": [
                            {
                                "type": "number",
                                "format": "float"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "accuracy": {
                        "oneOf": [
                            {
                                "type": "number",
                                "format": "float"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "armor": {
                        "oneOf": [
                            {
                                "type": "number",
                                "format": "float"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "quality": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "ItemMarketItem": {
                "required": [
                    "id",
                    "name",
                    "type",
                    "average_price"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ItemId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "average_price": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "type": "object"
            },
            "ItemMarketListingStackable": {
                "required": [
                    "price",
                    "amount"
                ],
                "properties": {
                    "price": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "ItemMarketListingItemDetails": {
                "required": [
                    "uid",
                    "stats",
                    "bonuses",
                    "rarity"
                ],
                "properties": {
                    "uid": {
                        "$ref": "#/components/schemas/ItemUid"
                    },
                    "stats": {
                        "$ref": "#/components/schemas/ItemMarketListingItemStats"
                    },
                    "bonuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemMarketListingItemBonus"
                        }
                    },
                    "rarity": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "yellow",
                                    "orange",
                                    "red"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "ItemMarketListingNonstackable": {
                "required": [
                    "price",
                    "amount",
                    "item_details"
                ],
                "properties": {
                    "price": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "itemDetails": {
                        "description": "This field used camelCase instead of snake_case by accident and is replaced with 'item_details' field. This will be removed on 1st of May 2025.",
                        "deprecated": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ItemMarketListingItemDetails"
                            }
                        ]
                    },
                    "item_details": {
                        "$ref": "#/components/schemas/ItemMarketListingItemDetails"
                    }
                },
                "type": "object"
            },
            "ItemMarket": {
                "required": [
                    "item",
                    "listings"
                ],
                "properties": {
                    "item": {
                        "$ref": "#/components/schemas/ItemMarketItem"
                    },
                    "listings": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ItemMarketListingNonstackable"
                                },
                                {
                                    "$ref": "#/components/schemas/ItemMarketListingStackable"
                                }
                            ]
                        }
                    }
                },
                "type": "object"
            },
            "MarketItemMarketResponse": {
                "required": [
                    "itemmarket",
                    "_metadata"
                ],
                "properties": {
                    "itemmarket": {
                        "$ref": "#/components/schemas/ItemMarket"
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "MarketSelectionName": {
                "description": "The following selections will fallback to API v1 and may change at any time: 'pointsmarket'.",
                "type": "string",
                "enum": [
                    "itemmarket",
                    "lookup",
                    "timestamp",
                    "pointsmarket",
                    "bazaar"
                ]
            },
            "MarketLookupResponse": {
                "required": [
                    "selections"
                ],
                "properties": {
                    "selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MarketSelectionName"
                        }
                    }
                },
                "type": "object"
            },
            "RacingCarsResponse": {
                "required": [
                    "cars"
                ],
                "properties": {
                    "cars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RaceCar"
                        }
                    }
                },
                "type": "object"
            },
            "RaceCar": {
                "required": [
                    "car_item_id",
                    "car_item_name",
                    "top_speed",
                    "acceleration",
                    "braking",
                    "dirt",
                    "handling",
                    "safety",
                    "tarmac",
                    "class"
                ],
                "properties": {
                    "car_item_id": {
                        "$ref": "#/components/schemas/ItemId"
                    },
                    "car_item_name": {
                        "type": "string"
                    },
                    "top_speed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "acceleration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "braking": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "dirt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "handling": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "safety": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "tarmac": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "class": {
                        "$ref": "#/components/schemas/RaceClassEnum"
                    }
                },
                "type": "object"
            },
            "RacingTracksResponse": {
                "required": [
                    "tracks"
                ],
                "properties": {
                    "tracks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RaceTrack"
                        }
                    }
                },
                "type": "object"
            },
            "RaceTrack": {
                "required": [
                    "id",
                    "title",
                    "description"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/RaceTrackId"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RacingCarUpgradesResponse": {
                "required": [
                    "carupgrades"
                ],
                "properties": {
                    "carupgrades": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RaceCarUpgrade"
                        }
                    }
                },
                "type": "object"
            },
            "RaceCarUpgrade": {
                "required": [
                    "id",
                    "class_required",
                    "name",
                    "description",
                    "category",
                    "subcategory",
                    "effects",
                    "cost"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/RaceCarUpgradeId"
                    },
                    "class_required": {
                        "$ref": "#/components/schemas/RaceClassEnum"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "category": {
                        "$ref": "#/components/schemas/RaceCarUpgradeCategory"
                    },
                    "subcategory": {
                        "$ref": "#/components/schemas/RaceCarUpgradeSubCategory"
                    },
                    "effects": {
                        "required": [
                            "top_speed",
                            "acceleration",
                            "braking",
                            "handling",
                            "safety",
                            "dirt",
                            "tarmac"
                        ],
                        "properties": {
                            "top_speed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "acceleration": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "braking": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "handling": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "safety": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "dirt": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "tarmac": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    },
                    "cost": {
                        "required": [
                            "points",
                            "cash"
                        ],
                        "properties": {
                            "points": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "cash": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "RacingRacesResponse": {
                "required": [
                    "races",
                    "_metadata"
                ],
                "properties": {
                    "races": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Race"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "Race": {
                "required": [
                    "id",
                    "title",
                    "track_id",
                    "creator_id",
                    "status",
                    "laps",
                    "participants",
                    "schedule",
                    "requirements"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/RaceId"
                    },
                    "title": {
                        "type": "string"
                    },
                    "track_id": {
                        "$ref": "#/components/schemas/RaceTrackId"
                    },
                    "creator_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "status": {
                        "$ref": "#/components/schemas/RaceStatusEnum"
                    },
                    "laps": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "participants": {
                        "required": [
                            "minimum",
                            "maximum",
                            "current"
                        ],
                        "properties": {
                            "minimum": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "maximum": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "current": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    },
                    "schedule": {
                        "required": [
                            "join_from",
                            "join_until",
                            "start",
                            "end"
                        ],
                        "properties": {
                            "join_from": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "join_until": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "start": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "end": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "requirements": {
                        "required": [
                            "car_class",
                            "driver_class",
                            "car_item_id",
                            "requires_stock_car",
                            "requires_password",
                            "join_fee"
                        ],
                        "properties": {
                            "car_class": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/RaceClassEnum"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "driver_class": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/RaceClassEnum"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "car_item_id": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/ItemId"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "requires_stock_car": {
                                "type": "boolean"
                            },
                            "requires_password": {
                                "type": "boolean"
                            },
                            "join_fee": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "RacingTrackRecordsResponse": {
                "required": [
                    "records"
                ],
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RaceRecord"
                        }
                    }
                },
                "type": "object"
            },
            "RaceRecord": {
                "required": [
                    "driver_id",
                    "driver_name",
                    "car_item_id",
                    "lap_time",
                    "car_item_name"
                ],
                "properties": {
                    "driver_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "driver_name": {
                        "type": "string"
                    },
                    "car_item_id": {
                        "$ref": "#/components/schemas/ItemId"
                    },
                    "lap_time": {
                        "type": "number",
                        "format": "float"
                    },
                    "car_item_name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RacerDetails": {
                "required": [
                    "driver_id",
                    "position",
                    "car_id",
                    "car_item_id",
                    "car_item_name",
                    "car_class",
                    "has_crashed",
                    "best_lap_time",
                    "race_time",
                    "time_ended"
                ],
                "properties": {
                    "driver_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "position": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "car_id": {
                        "$ref": "#/components/schemas/RaceCarId"
                    },
                    "car_item_id": {
                        "$ref": "#/components/schemas/ItemId"
                    },
                    "car_item_name": {
                        "type": "string"
                    },
                    "car_class": {
                        "$ref": "#/components/schemas/RaceClassEnum"
                    },
                    "has_crashed": {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "best_lap_time": {
                        "oneOf": [
                            {
                                "type": "number",
                                "format": "float"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "race_time": {
                        "oneOf": [
                            {
                                "type": "number",
                                "format": "float"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "time_ended": {
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "RacingRaceDetailsResponse": {
                "properties": {
                    "race": {
                        "allOf": [
                            {
                                "required": [
                                    "results"
                                ],
                                "properties": {
                                    "results": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/RacerDetails"
                                        }
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "$ref": "#/components/schemas/Race"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "RacingSelectionName": {
                "type": "string",
                "enum": [
                    "cars",
                    "carupgrades",
                    "lookup",
                    "race",
                    "races",
                    "records",
                    "timestamp",
                    "tracks"
                ]
            },
            "RacingLookupResponse": {
                "required": [
                    "selections"
                ],
                "properties": {
                    "selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RacingSelectionName"
                        }
                    }
                },
                "type": "object"
            },
            "TornEducationRewards": {
                "required": [
                    "working_stats",
                    "effect",
                    "honor"
                ],
                "properties": {
                    "working_stats": {
                        "required": [
                            "manual_labor",
                            "intelligence",
                            "endurance"
                        ],
                        "properties": {
                            "manual_labor": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "intelligence": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "endurance": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "effect": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "honor": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "TornEducationPrerequisites": {
                "required": [
                    "cost",
                    "courses"
                ],
                "properties": {
                    "cost": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "courses": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                },
                "type": "object"
            },
            "TornEducationCourses": {
                "required": [
                    "id",
                    "code",
                    "name",
                    "description",
                    "duration",
                    "rewards",
                    "prerequisites"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EducationId"
                    },
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rewards": {
                        "$ref": "#/components/schemas/TornEducationRewards"
                    },
                    "prerequisites": {
                        "$ref": "#/components/schemas/TornEducationPrerequisites"
                    }
                },
                "type": "object"
            },
            "TornEducation": {
                "required": [
                    "id",
                    "name",
                    "courses"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "courses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornEducationCourses"
                        }
                    }
                },
                "type": "object"
            },
            "TornEducationResponse": {
                "required": [
                    "education"
                ],
                "properties": {
                    "education": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornEducation"
                        }
                    }
                },
                "type": "object"
            },
            "TornTerritoryCoordinates": {
                "required": [
                    "x",
                    "y"
                ],
                "properties": {
                    "x": {
                        "type": "number",
                        "format": "float"
                    },
                    "y": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "TornTerritory": {
                "required": [
                    "id",
                    "sector",
                    "size",
                    "density",
                    "slots",
                    "respect",
                    "coordinates",
                    "neighbors"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionTerritoryEnum"
                    },
                    "sector": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "density": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "slots": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "respect": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/TornTerritoryCoordinates"
                    },
                    "neighbors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactionTerritoryEnum"
                        }
                    }
                },
                "type": "object"
            },
            "TornTerritoriesResponse": {
                "required": [
                    "territory",
                    "_metadata"
                ],
                "properties": {
                    "territory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornTerritory"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "TornTerritoriesNoLinksReponse": {
                "required": [
                    "territory"
                ],
                "properties": {
                    "territory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornTerritory"
                        }
                    }
                },
                "type": "object"
            },
            "TornSubcrimesResponse": {
                "required": [
                    "subcrimes"
                ],
                "properties": {
                    "subcrimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornSubcrime"
                        }
                    }
                },
                "type": "object"
            },
            "TornSubcrime": {
                "required": [
                    "id",
                    "name",
                    "nerve_cost"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nerve_cost": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "TornCrimesResponse": {
                "required": [
                    "crimes"
                ],
                "properties": {
                    "crimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornCrime"
                        }
                    }
                },
                "type": "object"
            },
            "TornCrime": {
                "required": [
                    "id",
                    "name",
                    "category_id",
                    "enhancer_id",
                    "enhancer_name",
                    "unique_outcomes_count",
                    "unique_outcomes_ids"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TornCrimeId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "category_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "category_name": {
                        "type": "string"
                    },
                    "enhancer_id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "enhancer_name": {
                        "type": "string"
                    },
                    "unique_outcomes_count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "unique_outcomes_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "TornCalendarActivity": {
                "required": [
                    "title",
                    "description",
                    "start",
                    "end"
                ],
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "end": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "TornCalendarResponse": {
                "required": [
                    "calendar"
                ],
                "properties": {
                    "calendar": {
                        "required": [
                            "competitions",
                            "events"
                        ],
                        "properties": {
                            "competitions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TornCalendarActivity"
                                }
                            },
                            "events": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TornCalendarActivity"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "TornHof": {
                "required": [
                    "id",
                    "username",
                    "faction_id",
                    "level",
                    "last_action",
                    "rank_name",
                    "rank_number",
                    "position",
                    "signed_up",
                    "age_in_days",
                    "value",
                    "rank"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "username": {
                        "type": "string"
                    },
                    "faction_id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "last_action": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rank_name": {
                        "type": "string"
                    },
                    "rank_number": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "signed_up": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "age_in_days": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "value": {
                        "description": "Value representing the chosen category. Traveltime is shown in seconds. If the chosen category is 'rank', the value is of type string. If the chosen category is 'racingskill', the value is of type float. Otherwise it is an integer."
                    },
                    "rank": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TornHofResponse": {
                "required": [
                    "hof",
                    "_metadata"
                ],
                "properties": {
                    "hof": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornHof"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "FactionHofValues": {
                "required": [
                    "chain",
                    "chain_duration",
                    "respect"
                ],
                "properties": {
                    "chain": {
                        "description": "Maximum chain achieved by the faction. Null if chosen category is 'rank' or 'respect'.",
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "chain_duration": {
                        "description": "The duration of the chain. Null if chosen category is 'rank' or 'respect'.",
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "respect": {
                        "description": "Null if chosen category is 'chain'.",
                        "oneOf": [
                            {
                                "type": "integer",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "TornFactionHof": {
                "required": [
                    "id",
                    "name",
                    "members",
                    "position",
                    "rank",
                    "values"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "members": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "position": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rank": {
                        "description": "The full rank title & division of the faction.",
                        "type": "string"
                    },
                    "values": {
                        "$ref": "#/components/schemas/FactionHofValues"
                    }
                },
                "type": "object"
            },
            "TornFactionHofResponse": {
                "required": [
                    "factionhof",
                    "_metadata"
                ],
                "properties": {
                    "factionhof": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornFactionHof"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "TornLog": {
                "required": [
                    "id",
                    "title"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/LogId"
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TornLogCategory": {
                "required": [
                    "id",
                    "title"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/LogCategoryId"
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TornLogTypesResponse": {
                "required": [
                    "logtypes"
                ],
                "properties": {
                    "logtypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornLog"
                        }
                    }
                },
                "type": "object"
            },
            "TornLogCategoriesResponse": {
                "required": [
                    "logcategories"
                ],
                "properties": {
                    "logcategories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornLogCategory"
                        }
                    }
                },
                "type": "object"
            },
            "Bounty": {
                "required": [
                    "target_id",
                    "target_name",
                    "target_level",
                    "lister_id",
                    "lister_name",
                    "reward",
                    "reason",
                    "quantity",
                    "is_anonymous",
                    "valid_until"
                ],
                "properties": {
                    "target_id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "target_name": {
                        "type": "string"
                    },
                    "target_level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lister_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "lister_name": {
                        "description": "If the bounty is anonymous this field is null.",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "reward": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "reason": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_anonymous": {
                        "type": "boolean"
                    },
                    "valid_until": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "AttackLogSummary": {
                "required": [
                    "id",
                    "name",
                    "hits",
                    "misses",
                    "damage"
                ],
                "properties": {
                    "id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "name": {
                        "oneOf": [
                            {
                                "description": "Name of the participant, could be null in stealthed attacks.",
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "hits": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "misses": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "damage": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "AttackLog": {
                "required": [
                    "text",
                    "timestamp",
                    "action",
                    "icon",
                    "attacker",
                    "defender"
                ],
                "properties": {
                    "text": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "action": {
                        "$ref": "#/components/schemas/AttackActionEnum"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "attacker": {
                        "oneOf": [
                            {
                                "description": "This value could be null in stealthed attacks.",
                                "required": [
                                    "id",
                                    "name",
                                    "item"
                                ],
                                "properties": {
                                    "id": {
                                        "$ref": "#/components/schemas/UserId"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "item": {
                                        "oneOf": [
                                            {
                                                "description": "This object could be null if there was no item being used in this turn or during this effect.",
                                                "properties": {
                                                    "id": {
                                                        "$ref": "#/components/schemas/ItemId"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "null"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "defender": {
                        "oneOf": [
                            {
                                "description": "This value could be null in stealthed attacks.",
                                "required": [
                                    "id",
                                    "name"
                                ],
                                "properties": {
                                    "id": {
                                        "$ref": "#/components/schemas/UserId"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "AttackLogResponse": {
                "required": [
                    "attacklog",
                    "_metadata"
                ],
                "properties": {
                    "attacklog": {
                        "required": [
                            "log",
                            "summary"
                        ],
                        "properties": {
                            "log": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AttackLog"
                                }
                            },
                            "summary": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AttackLogSummary"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "TornBountiesResponse": {
                "required": [
                    "bounties",
                    "_metadata"
                ],
                "properties": {
                    "bounties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Bounty"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "TornItemAmmo": {
                "required": [
                    "id",
                    "name",
                    "price",
                    "types"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/AmmoId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "price": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "types": {
                        "description": "Types of ammo",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornItemAmmoTypeEnum"
                        }
                    }
                },
                "type": "object"
            },
            "TornItemAmmoResponse": {
                "required": [
                    "itemammo"
                ],
                "properties": {
                    "itemammo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornItemAmmo"
                        }
                    }
                },
                "type": "object"
            },
            "TornItemMods": {
                "required": [
                    "id",
                    "name",
                    "description",
                    "dual_fit",
                    "weapons"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ItemModId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dual_fit": {
                        "description": "Whether the upgrade fits on dual weapons.",
                        "type": "boolean"
                    },
                    "weapons": {
                        "description": "The weapon types this upgrade can be attached to.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornItemWeaponTypeEnum"
                        }
                    }
                },
                "type": "object"
            },
            "TornItemModsResponse": {
                "required": [
                    "itemmods"
                ],
                "properties": {
                    "itemmods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornItemMods"
                        }
                    }
                },
                "type": "object"
            },
            "TornItemBaseStats": {
                "required": [
                    "damage",
                    "accuracy",
                    "armor"
                ],
                "properties": {
                    "damage": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "accuracy": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "armor": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "TornItemWeaponDetails": {
                "required": [
                    "stealth_level",
                    "base_stats",
                    "category",
                    "ammo",
                    "mods"
                ],
                "properties": {
                    "stealth_level": {
                        "type": "number",
                        "format": "float"
                    },
                    "base_stats": {
                        "$ref": "#/components/schemas/TornItemBaseStats"
                    },
                    "category": {
                        "$ref": "#/components/schemas/TornItemWeaponCategoryEnum"
                    },
                    "ammo": {
                        "oneOf": [
                            {
                                "required": [
                                    "id",
                                    "name",
                                    "magazine_rounds",
                                    "rate_of_fire"
                                ],
                                "properties": {
                                    "id": {
                                        "$ref": "#/components/schemas/AmmoId"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "magazine_rounds": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "rate_of_fire": {
                                        "required": [
                                            "minimum",
                                            "maximum"
                                        ],
                                        "properties": {
                                            "minimum": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "maximum": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "mods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemModId"
                        }
                    }
                },
                "type": "object"
            },
            "TornItemArmorCoverage": {
                "required": [
                    "name",
                    "value"
                ],
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/TornItemArmorCoveragePartEnum"
                    },
                    "value": {
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "TornItemArmorDetails": {
                "required": [
                    "coverage",
                    "base_stats"
                ],
                "properties": {
                    "coverage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornItemArmorCoverage"
                        }
                    },
                    "base_stats": {
                        "$ref": "#/components/schemas/TornItemBaseStats"
                    }
                },
                "type": "object"
            },
            "TornItem": {
                "required": [
                    "id",
                    "name",
                    "description",
                    "effect",
                    "requirement",
                    "image",
                    "type",
                    "sub_type",
                    "is_masked",
                    "is_tradable",
                    "is_found_in_city",
                    "value",
                    "circulation",
                    "details"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ItemId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "effect": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "requirement": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "image": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/TornItemTypeEnum"
                    },
                    "sub_type": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TornItemWeaponTypeEnum"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "is_masked": {
                        "type": "boolean"
                    },
                    "is_tradable": {
                        "type": "boolean"
                    },
                    "is_found_in_city": {
                        "type": "boolean"
                    },
                    "value": {
                        "required": [
                            "vendor",
                            "buy_price",
                            "sell_price",
                            "market_price"
                        ],
                        "properties": {
                            "vendor": {
                                "oneOf": [
                                    {
                                        "required": [
                                            "country",
                                            "name"
                                        ],
                                        "properties": {
                                            "country": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "buy_price": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "sell_price": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "market_price": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "type": "object"
                    },
                    "circulation": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "details": {
                        "description": "If the item 'type' is 'Armor' then TornItemArmorDetails is returned.<br>If the item 'type' is 'Weapon' then TornItemWeaponDetails is returned.<br>Otherwise, null is returned.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TornItemWeaponDetails"
                            },
                            {
                                "$ref": "#/components/schemas/TornItemArmorDetails"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "TornItemsResponse": {
                "required": [
                    "items"
                ],
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornItem"
                        }
                    }
                },
                "type": "object"
            },
            "TornFactionTreeBranch": {
                "required": [
                    "id",
                    "name",
                    "upgrades"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/FactionBranchId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "upgrades": {
                        "type": "array",
                        "items": {
                            "required": [
                                "name",
                                "level",
                                "ability",
                                "challenge",
                                "cost"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "level": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "ability": {
                                    "type": "string"
                                },
                                "cost": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "challenge": {
                                    "oneOf": [
                                        {
                                            "required": [
                                                "description",
                                                "amount_required",
                                                "stat"
                                            ],
                                            "properties": {
                                                "description": {
                                                    "type": "string"
                                                },
                                                "amount_required": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "stat": {
                                                    "$ref": "#/components/schemas/FactionStatEnum"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "TornFactionTree": {
                "required": [
                    "name",
                    "branches"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornFactionTreeBranch"
                        }
                    }
                },
                "type": "object"
            },
            "TornFactionTreeResponse": {
                "required": [
                    "factionTree"
                ],
                "properties": {
                    "factionTree": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornFactionTree"
                        }
                    }
                },
                "type": "object"
            },
            "TornSelectionName": {
                "description": "The following selections will fallback to API v1 and may change at any time: 'bank','cards','cityshops','companies','competition','dirtybombs','gyms','honors','itemdetails','itemstats','medals','organisedcrimes','pawnshop','pokertables','properties','raidreport','raids','rockpaperscissors','searchforcash','shoplifting','stats','stocks'.\n *  The following selections are not available in API v2: 'chainreport', 'rackets', 'rankedwarreport', 'rankedwars', 'territorynames', 'territorywarreport', 'territorywars'.",
                "type": "string",
                "enum": [
                    "attacklog",
                    "bounties",
                    "calendar",
                    "crimes",
                    "education",
                    "factionhof",
                    "factiontree",
                    "hof",
                    "itemammo",
                    "itemmods",
                    "items",
                    "logcategories",
                    "logtypes",
                    "lookup",
                    "subcrimes",
                    "territory",
                    "timestamp",
                    "bank",
                    "cards",
                    "cityshops",
                    "companies",
                    "competition",
                    "dirtybombs",
                    "gyms",
                    "honors",
                    "itemdetails",
                    "itemstats",
                    "medals",
                    "organisedcrimes",
                    "pawnshop",
                    "pokertables",
                    "properties",
                    "raidreport",
                    "raids",
                    "rockpaperscissors",
                    "searchforcash",
                    "shoplifting",
                    "stats",
                    "stocks",
                    "chainreport",
                    "rackets",
                    "rankedwarreport",
                    "rankedwars",
                    "territorynames",
                    "territorywarreport",
                    "territorywars"
                ]
            },
            "TornLookupResponse": {
                "required": [
                    "selections"
                ],
                "properties": {
                    "selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TornSelectionName"
                        }
                    }
                },
                "type": "object"
            },
            "PersonalStatsOther": {
                "required": [
                    "other"
                ],
                "properties": {
                    "other": {
                        "required": [
                            "activity",
                            "awards",
                            "merits_bought",
                            "refills",
                            "donator_days",
                            "ranked_war_wins"
                        ],
                        "properties": {
                            "activity": {
                                "required": [
                                    "time",
                                    "streak"
                                ],
                                "properties": {
                                    "time": {
                                        "description": "Time played in seconds",
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "streak": {
                                        "required": [
                                            "best",
                                            "current"
                                        ],
                                        "properties": {
                                            "best": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "current": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "awards": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "merits_bought": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "refills": {
                                "required": [
                                    "energy",
                                    "nerve",
                                    "token"
                                ],
                                "properties": {
                                    "energy": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "nerve": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "token": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "donator_days": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "ranked_war_wins": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsOtherPopular": {
                "required": [
                    "other"
                ],
                "properties": {
                    "other": {
                        "required": [
                            "activity",
                            "awards",
                            "merits_bought",
                            "refills",
                            "donator_days",
                            "ranked_war_wins"
                        ],
                        "properties": {
                            "activity": {
                                "required": [
                                    "time",
                                    "streak"
                                ],
                                "properties": {
                                    "time": {
                                        "description": "Time played in seconds",
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "streak": {
                                        "required": [
                                            "best",
                                            "current"
                                        ],
                                        "properties": {
                                            "best": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "current": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "awards": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "merits_bought": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "refills": {
                                "required": [
                                    "energy",
                                    "nerve"
                                ],
                                "properties": {
                                    "energy": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "nerve": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "donator_days": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "ranked_war_wins": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsNetworthExtended": {
                "required": [
                    "networth"
                ],
                "properties": {
                    "networth": {
                        "required": [
                            "total",
                            "wallet",
                            "vaults",
                            "bank",
                            "overseas_bank",
                            "points",
                            "inventory",
                            "display_case",
                            "bazaar",
                            "item_market",
                            "property",
                            "stock_market",
                            "auction_house",
                            "bookie",
                            "company",
                            "enlisted_cars",
                            "piggy_bank",
                            "pending",
                            "loans",
                            "unpaid_fees"
                        ],
                        "properties": {
                            "total": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "wallet": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "vaults": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "bank": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "overseas_bank": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "points": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "inventory": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "display_case": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "bazaar": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "item_market": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "property": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "stock_market": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "auction_house": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "bookie": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "company": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "enlisted_cars": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "piggy_bank": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "pending": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "loans": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "unpaid_fees": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsNetworthPublic": {
                "required": [
                    "networth"
                ],
                "properties": {
                    "networth": {
                        "required": [
                            "total"
                        ],
                        "properties": {
                            "total": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsRacing": {
                "required": [
                    "racing"
                ],
                "properties": {
                    "racing": {
                        "required": [
                            "skill",
                            "points",
                            "races"
                        ],
                        "properties": {
                            "skill": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "points": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "races": {
                                "required": [
                                    "entered",
                                    "won"
                                ],
                                "properties": {
                                    "entered": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "won": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsMissions": {
                "required": [
                    "missions"
                ],
                "properties": {
                    "missions": {
                        "required": [
                            "missions",
                            "contracts",
                            "credits"
                        ],
                        "properties": {
                            "missions": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "contracts": {
                                "required": [
                                    "total",
                                    "duke"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "duke": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "credits": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsDrugs": {
                "required": [
                    "drugs"
                ],
                "properties": {
                    "drugs": {
                        "required": [
                            "cannabis",
                            "ecstasy",
                            "ketamine",
                            "lsd",
                            "opium",
                            "pcp",
                            "shrooms",
                            "speed",
                            "vicodin",
                            "xanax",
                            "total",
                            "overdoses",
                            "rehabilitations"
                        ],
                        "properties": {
                            "cannabis": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "ecstasy": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "ketamine": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "lsd": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "opium": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "pcp": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "shrooms": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "vicodin": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "xanax": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "total": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "overdoses": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "rehabilitations": {
                                "required": [
                                    "amount",
                                    "fees"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "fees": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsTravel": {
                "required": [
                    "travel"
                ],
                "properties": {
                    "travel": {
                        "required": [
                            "total",
                            "time_spent",
                            "items_bought",
                            "hunting",
                            "attacks_won",
                            "defends_lost",
                            "argentina",
                            "canada",
                            "cayman_islands",
                            "china",
                            "hawaii",
                            "japan",
                            "mexico",
                            "united_arab_emirates",
                            "united_kingdom",
                            "south_africa",
                            "switzerland"
                        ],
                        "properties": {
                            "total": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "time_spent": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "items_bought": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "hunting": {
                                "required": [
                                    "skill"
                                ],
                                "properties": {
                                    "skill": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "attacks_won": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "defends_lost": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "argentina": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "canada": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "cayman_islands": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "china": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "hawaii": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "japan": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "mexico": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "united_arab_emirates": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "united_kingdom": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "south_africa": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "switzerland": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsTravelPopular": {
                "required": [
                    "travel"
                ],
                "properties": {
                    "travel": {
                        "required": [
                            "total",
                            "time_spent"
                        ],
                        "properties": {
                            "total": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "time_spent": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsItems": {
                "required": [
                    "items"
                ],
                "properties": {
                    "items": {
                        "required": [
                            "found",
                            "trashed",
                            "used",
                            "viruses_coded"
                        ],
                        "properties": {
                            "found": {
                                "required": [
                                    "city",
                                    "dump",
                                    "easter_eggs"
                                ],
                                "properties": {
                                    "city": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "dump": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "easter_eggs": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "trashed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "used": {
                                "required": [
                                    "books",
                                    "boosters",
                                    "consumables",
                                    "candy",
                                    "alcohol",
                                    "energy_drinks",
                                    "stat_enhancers",
                                    "easter_eggs"
                                ],
                                "properties": {
                                    "books": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "boosters": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "consumables": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "candy": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "alcohol": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "energy_drinks": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stat_enhancers": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "easter_eggs": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "viruses_coded": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsItemsPopular": {
                "required": [
                    "items"
                ],
                "properties": {
                    "items": {
                        "required": [
                            "found",
                            "used"
                        ],
                        "properties": {
                            "found": {
                                "required": [
                                    "dump"
                                ],
                                "properties": {
                                    "dump": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "used": {
                                "required": [
                                    "books",
                                    "boosters",
                                    "consumables",
                                    "candy",
                                    "alcohol",
                                    "energy_drinks",
                                    "stat_enhancers",
                                    "easter_eggs"
                                ],
                                "properties": {
                                    "books": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "boosters": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "consumables": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "candy": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "alcohol": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "energy_drinks": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stat_enhancers": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "easter_eggs": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsInvestments": {
                "required": [
                    "investments"
                ],
                "properties": {
                    "investments": {
                        "required": [
                            "bank",
                            "stocks"
                        ],
                        "properties": {
                            "bank": {
                                "required": [
                                    "total",
                                    "profit",
                                    "current",
                                    "time_remaining"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "profit": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "current": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "time_remaining": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "stocks": {
                                "required": [
                                    "profits",
                                    "losses",
                                    "fees",
                                    "net_profits",
                                    "payouts"
                                ],
                                "properties": {
                                    "profits": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "losses": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "fees": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "net_profits": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "payouts": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsBounties": {
                "required": [
                    "bounties"
                ],
                "properties": {
                    "bounties": {
                        "required": [
                            "placed",
                            "collected",
                            "received"
                        ],
                        "properties": {
                            "placed": {
                                "required": [
                                    "amount",
                                    "value"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "value": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            },
                            "collected": {
                                "required": [
                                    "amount",
                                    "value"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "value": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            },
                            "received": {
                                "required": [
                                    "amount",
                                    "value"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "value": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsCrimesV2": {
                "required": [
                    "offenses",
                    "skills",
                    "version"
                ],
                "properties": {
                    "offenses": {
                        "required": [
                            "vandalism",
                            "fraud",
                            "theft",
                            "counterfeiting",
                            "illicit_services",
                            "cybercrime",
                            "extortion",
                            "illegal_production",
                            "organized_crimes",
                            "total"
                        ],
                        "properties": {
                            "vandalism": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "fraud": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "theft": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "counterfeiting": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "illicit_services": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "cybercrime": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "extortion": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "illegal_production": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "organized_crimes": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "total": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    },
                    "skills": {
                        "required": [
                            "search_for_cash",
                            "bootlegging",
                            "graffiti",
                            "shoplifting",
                            "pickpocketing",
                            "card_skimming",
                            "burglary",
                            "hustling",
                            "disposal",
                            "cracking",
                            "forgery",
                            "scamming"
                        ],
                        "properties": {
                            "search_for_cash": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "bootlegging": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "graffiti": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "shoplifting": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "pickpocketing": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "card_skimming": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "burglary": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "hustling": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "disposal": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "cracking": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "forgery": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "scamming": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PersonalStatsCrimesV1": {
                "required": [
                    "total",
                    "sell_illegal_goods",
                    "theft",
                    "auto_theft",
                    "drug_deals",
                    "computer",
                    "fraud",
                    "murder",
                    "other",
                    "organized_crimes",
                    "version"
                ],
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sell_illegal_goods": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "theft": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "auto_theft": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "drug_deals": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "computer": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fraud": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "murder": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "other": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "organized_crimes": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PersonalStatsCrimesPopular": {
                "required": [
                    "crimes"
                ],
                "properties": {
                    "crimes": {
                        "required": [
                            "total",
                            "version"
                        ],
                        "properties": {
                            "total": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "version": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsCommunication": {
                "required": [
                    "communication"
                ],
                "properties": {
                    "communication": {
                        "required": [
                            "mails_sent",
                            "classified_ads",
                            "personals"
                        ],
                        "properties": {
                            "mails_sent": {
                                "required": [
                                    "total",
                                    "friends",
                                    "faction",
                                    "colleagues",
                                    "spouse"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "friends": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "faction": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "colleagues": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "spouse": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "classified_ads": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "personals": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsFinishingHits": {
                "required": [
                    "finishing_hits"
                ],
                "properties": {
                    "finishing_hits": {
                        "required": [
                            "heavy_artillery",
                            "machine_guns",
                            "rifles",
                            "sub_machine_guns",
                            "shotguns",
                            "pistols",
                            "temporary",
                            "piercing",
                            "slashing",
                            "clubbing",
                            "mechanical",
                            "hand_to_hand"
                        ],
                        "properties": {
                            "heavy_artillery": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "machine_guns": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "rifles": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "sub_machine_guns": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "shotguns": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "pistols": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "temporary": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "piercing": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "slashing": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "clubbing": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "mechanical": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "hand_to_hand": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsHospital": {
                "required": [
                    "hospital"
                ],
                "properties": {
                    "hospital": {
                        "required": [
                            "times_hospitalized",
                            "medical_items_used",
                            "blood_withdrawn",
                            "reviving"
                        ],
                        "properties": {
                            "times_hospitalized": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "medical_items_used": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "blood_withdrawn": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "reviving": {
                                "required": [
                                    "skill",
                                    "revives",
                                    "revives_received"
                                ],
                                "properties": {
                                    "skill": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "revives": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "revives_received": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsHospitalPopular": {
                "required": [
                    "hospital"
                ],
                "properties": {
                    "hospital": {
                        "required": [
                            "medical_items_used",
                            "reviving"
                        ],
                        "properties": {
                            "medical_items_used": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "reviving": {
                                "required": [
                                    "skill",
                                    "revives"
                                ],
                                "properties": {
                                    "skill": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "revives": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsJail": {
                "required": [
                    "jail"
                ],
                "properties": {
                    "jail": {
                        "required": [
                            "times_jailed",
                            "busts",
                            "bails"
                        ],
                        "properties": {
                            "times_jailed": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "busts": {
                                "required": [
                                    "success",
                                    "fails"
                                ],
                                "properties": {
                                    "success": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "fails": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "bails": {
                                "required": [
                                    "amount",
                                    "fees"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "fees": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsTrading": {
                "required": [
                    "trading"
                ],
                "properties": {
                    "trading": {
                        "required": [
                            "items",
                            "trades",
                            "points",
                            "bazaar"
                        ],
                        "properties": {
                            "items": {
                                "required": [
                                    "bought",
                                    "sent",
                                    "auctions"
                                ],
                                "properties": {
                                    "bought": {
                                        "required": [
                                            "market",
                                            "shops"
                                        ],
                                        "properties": {
                                            "market": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "shops": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "auctions": {
                                        "required": [
                                            "won",
                                            "sold"
                                        ],
                                        "properties": {
                                            "won": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "sold": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "sent": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "trades": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "points": {
                                "required": [
                                    "bought",
                                    "sold"
                                ],
                                "properties": {
                                    "bought": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "sold": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "bazaar": {
                                "required": [
                                    "customers",
                                    "sales",
                                    "profit"
                                ],
                                "properties": {
                                    "customers": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "sales": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "profit": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            },
                            "item_market": {
                                "required": [
                                    "customers",
                                    "sales",
                                    "revenue",
                                    "fees"
                                ],
                                "properties": {
                                    "customers": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "sales": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "revenue": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "fees": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsJobsPublic": {
                "required": [
                    "jobs"
                ],
                "properties": {
                    "jobs": {
                        "required": [
                            "job_points_used",
                            "trains_received"
                        ],
                        "properties": {
                            "job_points_used": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "trains_received": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsJobsExtended": {
                "required": [
                    "jobs"
                ],
                "properties": {
                    "jobs": {
                        "required": [
                            "job_points_used",
                            "trains_received",
                            "stats"
                        ],
                        "properties": {
                            "job_points_used": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "trains_received": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "stats": {
                                "required": [
                                    "manual",
                                    "intelligence",
                                    "endurance",
                                    "total"
                                ],
                                "properties": {
                                    "manual": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "intelligence": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "endurance": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsBattleStats": {
                "required": [
                    "battle_stats"
                ],
                "properties": {
                    "battle_stats": {
                        "required": [
                            "strength",
                            "defense",
                            "speed",
                            "dexterity",
                            "total"
                        ],
                        "properties": {
                            "strength": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "defense": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "speed": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "dexterity": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "total": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsAttackingPublic": {
                "required": [
                    "attacking"
                ],
                "properties": {
                    "attacking": {
                        "required": [
                            "attacks",
                            "defends",
                            "elo",
                            "unarmored_wins",
                            "highest_level_beaten",
                            "escpaes",
                            "killstreak",
                            "hits",
                            "damage",
                            "networth",
                            "ammunition",
                            "faction"
                        ],
                        "properties": {
                            "attacks": {
                                "required": [
                                    "won",
                                    "lost",
                                    "stalemate",
                                    "assist",
                                    "stealth"
                                ],
                                "properties": {
                                    "won": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "lost": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stalemate": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "assist": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stealth": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "defends": {
                                "required": [
                                    "won",
                                    "lost",
                                    "stalemate",
                                    "total"
                                ],
                                "properties": {
                                    "won": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "lost": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stalemate": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "elo": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "unarmored_wins": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "highest_level_beaten": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "escapes": {
                                "required": [
                                    "player",
                                    "foes"
                                ],
                                "properties": {
                                    "player": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "foes": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "killstreak": {
                                "required": [
                                    "best"
                                ],
                                "properties": {
                                    "best": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "hits": {
                                "required": [
                                    "success",
                                    "miss",
                                    "critical",
                                    "one_hit_kills"
                                ],
                                "properties": {
                                    "success": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "miss": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "critical": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "one_hit_kills": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "damage": {
                                "required": [
                                    "total",
                                    "best"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "best": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "networth": {
                                "required": [
                                    "money_mugged",
                                    "largest_mug",
                                    "items_looted"
                                ],
                                "properties": {
                                    "money_mugged": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "largest_mug": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "items_looted": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "ammunition": {
                                "required": [
                                    "total",
                                    "special",
                                    "hollow_point",
                                    "tracer",
                                    "piercing",
                                    "incendiary"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "special": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "hollow_point": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "tracer": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "piercing": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "incendiary": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "faction": {
                                "required": [
                                    "respect",
                                    "retaliations",
                                    "ranked_war_hits",
                                    "raid_hits",
                                    "territory"
                                ],
                                "properties": {
                                    "respect": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "retaliations": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "ranked_war_hits": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "raid_hits": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "territory": {
                                        "required": [
                                            "wall_joins",
                                            "wall_clears",
                                            "wall_time"
                                        ],
                                        "properties": {
                                            "wall_joins": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "wall_clears": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "wall_time": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsAttackingExtended": {
                "required": [
                    "attacking"
                ],
                "properties": {
                    "attacking": {
                        "required": [
                            "attacks",
                            "defends",
                            "elo",
                            "unarmored_wins",
                            "highest_level_beaten",
                            "escapes",
                            "killstreak",
                            "hits",
                            "damage",
                            "networth",
                            "ammunition",
                            "faction"
                        ],
                        "properties": {
                            "attacks": {
                                "required": [
                                    "won",
                                    "lost",
                                    "stalemate",
                                    "assist",
                                    "stealth"
                                ],
                                "properties": {
                                    "won": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "lost": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stalemate": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "assist": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stealth": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "defends": {
                                "required": [
                                    "won",
                                    "lost",
                                    "stalemate",
                                    "total"
                                ],
                                "properties": {
                                    "won": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "lost": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stalemate": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "elo": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "unarmored_wins": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "highest_level_beaten": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "escapes": {
                                "required": [
                                    "player",
                                    "foes"
                                ],
                                "properties": {
                                    "player": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "foes": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "killstreak": {
                                "required": [
                                    "best",
                                    "current"
                                ],
                                "properties": {
                                    "best": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "current": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "hits": {
                                "required": [
                                    "success",
                                    "miss",
                                    "critical",
                                    "one_hit_kills"
                                ],
                                "properties": {
                                    "success": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "miss": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "critical": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "one_hit_kills": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "damage": {
                                "required": [
                                    "total",
                                    "best"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "best": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "networth": {
                                "required": [
                                    "money_mugged",
                                    "largest_mug",
                                    "items_looted"
                                ],
                                "properties": {
                                    "money_mugged": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "largest_mug": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "items_looted": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "ammunition": {
                                "required": [
                                    "total",
                                    "special",
                                    "hollow_point",
                                    "tracer",
                                    "piercing",
                                    "incendiary"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "special": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "hollow_point": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "tracer": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "piercing": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "incendiary": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "faction": {
                                "required": [
                                    "respect",
                                    "retaliations",
                                    "ranked_war_hits",
                                    "raid_hits",
                                    "territory"
                                ],
                                "properties": {
                                    "respect": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "retaliations": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "ranked_war_hits": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "raid_hits": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "territory": {
                                        "required": [
                                            "wall_joins",
                                            "wall_clears",
                                            "wall_time"
                                        ],
                                        "properties": {
                                            "wall_joins": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "wall_clears": {
                                                "type": "integer",
                                                "format": "int32"
                                            },
                                            "wall_time": {
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsAttackingPopular": {
                "required": [
                    "attacking"
                ],
                "properties": {
                    "attacking": {
                        "required": [
                            "attacks",
                            "defends",
                            "elo",
                            "escapes",
                            "killstreak",
                            "hits",
                            "damage",
                            "networth",
                            "ammunition",
                            "faction"
                        ],
                        "properties": {
                            "attacks": {
                                "required": [
                                    "won",
                                    "lost",
                                    "stalemate",
                                    "assist"
                                ],
                                "properties": {
                                    "won": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "lost": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stalemate": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "assist": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "defends": {
                                "required": [
                                    "won",
                                    "lost",
                                    "stalemate"
                                ],
                                "properties": {
                                    "won": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "lost": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "stalemate": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "elo": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "escapes": {
                                "required": [
                                    "player",
                                    "foes"
                                ],
                                "properties": {
                                    "player": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "foes": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "killstreak": {
                                "required": [
                                    "best"
                                ],
                                "properties": {
                                    "best": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "hits": {
                                "required": [
                                    "success",
                                    "miss",
                                    "critical",
                                    "one_hit_kills"
                                ],
                                "properties": {
                                    "success": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "miss": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "critical": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "one_hit_kills": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "damage": {
                                "required": [
                                    "best",
                                    "total"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "best": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "networth": {
                                "required": [
                                    "money_mugged",
                                    "largest_mug",
                                    "items_looted"
                                ],
                                "properties": {
                                    "money_mugged": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "largest_mug": {
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "items_looted": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "ammunition": {
                                "required": [
                                    "total",
                                    "special",
                                    "hollow_point",
                                    "tracer",
                                    "piercing",
                                    "incendiary"
                                ],
                                "properties": {
                                    "total": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "special": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "hollow_point": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "tracer": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "piercing": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "incendiary": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            },
                            "faction": {
                                "required": [
                                    "respect",
                                    "ranked_war_hits"
                                ],
                                "properties": {
                                    "respect": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "ranked_war_hits": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PersonalStatsHistoricStat": {
                "required": [
                    "name",
                    "value",
                    "timestamp"
                ],
                "properties": {
                    "name": {
                        "description": "Requested stat name",
                        "type": "string"
                    },
                    "value": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "timestamp": {
                        "description": "Timestamp when the stat was last updated",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserPersonalStatsHistoric": {
                "required": [
                    "personalstats"
                ],
                "properties": {
                    "personalstats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonalStatsHistoricStat"
                        }
                    }
                },
                "type": "object"
            },
            "PersonalStatsCrimes": {
                "description": "Response for PersonalStatsCrimes depends on which crime version user is currently.",
                "required": [
                    "crimes"
                ],
                "properties": {
                    "crimes": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PersonalStatsCrimesV1"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCrimesV2"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserPersonalStatsPopular": {
                "required": [
                    "personalstats"
                ],
                "properties": {
                    "personalstats": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PersonalStatsAttackingPopular"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsJobsPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsHospitalPopular"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCrimesPopular"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsItemsPopular"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsTravelPopular"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsDrugs"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsNetworthPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsOtherPopular"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserPersonalStatsCategory": {
                "description": "Schema name corresponds to the requested category",
                "required": [
                    "personalstats"
                ],
                "properties": {
                    "personalstats": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PersonalStatsAttackingPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsJobsPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsTrading"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsJail"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsHospital"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsFinishingHits"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCommunication"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCrimes"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsBounties"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsItems"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsTravel"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsDrugs"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsMissions"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsRacing"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsNetworthPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsOther"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserPersonalStatsFull": {
                "required": [
                    "personalstats"
                ],
                "properties": {
                    "personalstats": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PersonalStatsAttackingExtended"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsBattleStats"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsJobsExtended"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsTrading"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsJail"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsHospital"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsFinishingHits"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCommunication"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCrimes"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsBounties"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsInvestments"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsItems"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsTravel"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsDrugs"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsMissions"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsRacing"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsNetworthExtended"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsOther"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserPersonalStatsFullPublic": {
                "required": [
                    "personalstats"
                ],
                "properties": {
                    "personalstats": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PersonalStatsAttackingPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsJobsPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsTrading"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsJail"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsHospital"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsFinishingHits"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCommunication"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsCrimes"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsBounties"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsItems"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsTravel"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsDrugs"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsMissions"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsRacing"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsNetworthPublic"
                            },
                            {
                                "$ref": "#/components/schemas/PersonalStatsOther"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserPersonalStatsResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/UserPersonalStatsFull"
                    },
                    {
                        "$ref": "#/components/schemas/UserPersonalStatsFullPublic"
                    },
                    {
                        "$ref": "#/components/schemas/UserPersonalStatsCategory"
                    },
                    {
                        "$ref": "#/components/schemas/UserPersonalStatsPopular"
                    },
                    {
                        "$ref": "#/components/schemas/UserPersonalStatsHistoric"
                    }
                ]
            },
            "PersonalStatsCategoryEnum": {
                "type": "string",
                "enum": [
                    "all",
                    "popular",
                    "attacking",
                    "battle_stats",
                    "jobs",
                    "trading",
                    "jail",
                    "hospital",
                    "finishing_hits",
                    "communication",
                    "crimes",
                    "bounties",
                    "investments",
                    "items",
                    "travel",
                    "drugs",
                    "missions",
                    "racing",
                    "networth",
                    "other",
                    "itemmarketcustomers",
                    "itemmarketsales",
                    "itemmarketrevenue",
                    "itemmarketfees"
                ]
            },
            "PersonalStatsStatName": {
                "type": "string",
                "enum": [
                    "attackswon",
                    "attackslost",
                    "attacksdraw",
                    "attacksassisted",
                    "defendswon",
                    "defendslost",
                    "defendsstalemated",
                    "elo",
                    "yourunaway",
                    "theyrunaway",
                    "unarmoredwon",
                    "bestkillstreak",
                    "attackhits",
                    "attackmisses",
                    "attackdamage",
                    "bestdamage",
                    "onehitkills",
                    "attackcriticalhits",
                    "roundsfired",
                    "specialammoused",
                    "hollowammoused",
                    "tracerammoused",
                    "piercingammoused",
                    "incendiaryammoused",
                    "attacksstealthed",
                    "retals",
                    "moneymugged",
                    "largestmug",
                    "itemslooted",
                    "highestbeaten",
                    "respectforfaction",
                    "rankedwarhits",
                    "raidhits",
                    "territoryjoins",
                    "territoryclears",
                    "territorytime",
                    "jobpointsused",
                    "trainsreceived",
                    "marketitemsbought",
                    "auctionswon",
                    "auctionsells",
                    "itemssent",
                    "trades",
                    "cityitemsbought",
                    "pointsbought",
                    "pointssold",
                    "bazaarcustomers",
                    "bazaarsales",
                    "bazaarprofit",
                    "jailed",
                    "peoplebusted",
                    "failedbusts",
                    "peoplebought",
                    "peopleboughtspent",
                    "hospital",
                    "medicalitemsused",
                    "bloodwithdrawn",
                    "reviveskill",
                    "revives",
                    "revivesreceived",
                    "heavyhits",
                    "machinehits",
                    "riflehits",
                    "smghits",
                    "shotgunhits",
                    "pistolhits",
                    "temphits",
                    "piercinghits",
                    "slashinghits",
                    "clubbinghits",
                    "mechanicalhits",
                    "h2hhits",
                    "mailssent",
                    "friendmailssent",
                    "factionmailssent",
                    "companymailssent",
                    "spousemailssent",
                    "classifiedadsplaced",
                    "personalsplaced",
                    "criminaloffensesold",
                    "sellillegalgoods",
                    "theftold",
                    "autotheftcrime",
                    "drugdealscrime",
                    "computercrime",
                    "fraudold",
                    "murdercrime",
                    "othercrime",
                    "organizedcrimes",
                    "bountiesplaced",
                    "totalbountyspent",
                    "bountiescollected",
                    "totalbountyreward",
                    "bountiesreceived",
                    "receivedbountyvalue",
                    "cityfinds",
                    "dumpfinds",
                    "itemsdumped",
                    "booksread",
                    "boostersused",
                    "consumablesused",
                    "candyused",
                    "alcoholused",
                    "energydrinkused",
                    "statenhancersused",
                    "eastereggsfound",
                    "eastereggsused",
                    "virusescoded",
                    "traveltimes",
                    "timespenttraveling",
                    "itemsboughtabroad",
                    "attackswonabroad",
                    "defendslostabroad",
                    "argtravel",
                    "mextravel",
                    "uaetravel",
                    "hawtravel",
                    "japtravel",
                    "uktravel",
                    "satravel",
                    "switravel",
                    "chitravel",
                    "cantravel",
                    "caytravel",
                    "drugsused",
                    "overdosed",
                    "rehabs",
                    "rehabcost",
                    "cantaken",
                    "exttaken",
                    "kettaken",
                    "lsdtaken",
                    "opitaken",
                    "pcptaken",
                    "shrtaken",
                    "spetaken",
                    "victaken",
                    "xantaken",
                    "missionscompleted",
                    "contractscompleted",
                    "dukecontractscompleted",
                    "missioncreditsearned",
                    "racingskill",
                    "racingpointsearned",
                    "racesentered",
                    "raceswon",
                    "networth",
                    "timeplayed",
                    "activestreak",
                    "bestactivestreak",
                    "awards",
                    "refills",
                    "nerverefills",
                    "tokenrefills",
                    "meritsbought",
                    "daysbeendonator",
                    "criminaloffenses",
                    "vandalism",
                    "theft",
                    "counterfeiting",
                    "fraud",
                    "illicitservices",
                    "cybercrime",
                    "extortion",
                    "illegalproduction",
                    "currentkillstreak",
                    "strength",
                    "defense",
                    "speed",
                    "dexterity",
                    "totalstats",
                    "manuallabor",
                    "intelligence",
                    "endurance",
                    "totalworkingstats",
                    "moneyinvested",
                    "investedprofit",
                    "investamount",
                    "banktimeleft",
                    "stockprofits",
                    "stocklosses",
                    "stockfees",
                    "stocknetprofits",
                    "stockpayouts",
                    "networthwallet",
                    "networthvault",
                    "networthbank",
                    "networthcayman",
                    "networthpoints",
                    "networthitems",
                    "networthdisplaycase",
                    "networthbazaar",
                    "networthitemmarket",
                    "networthproperties",
                    "networthstockmarket",
                    "networthauctionhouse",
                    "networthbookie",
                    "networthcompany",
                    "networthenlistedcars",
                    "networthpiggybank",
                    "networthpending",
                    "networthloan",
                    "networthunpaidfees",
                    "huntingskill",
                    "searchforcashskill",
                    "bootleggingskill",
                    "graffitiskill",
                    "shopliftingskill",
                    "pickpocketingskill",
                    "cardskimmingskill",
                    "burglaryskill",
                    "hustlingskill",
                    "disposalskill",
                    "crackingskill",
                    "forgeryskill",
                    "scammingskill"
                ]
            },
            "UserCurrentEducation": {
                "required": [
                    "id",
                    "until"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/EducationId"
                    },
                    "until": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserEducation": {
                "required": [
                    "complete",
                    "current"
                ],
                "properties": {
                    "complete": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EducationId"
                        }
                    },
                    "current": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserCurrentEducation"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserEducationResponse": {
                "required": [
                    "education"
                ],
                "properties": {
                    "education": {
                        "$ref": "#/components/schemas/UserEducation"
                    }
                },
                "type": "object"
            },
            "UserCrimeDetailsBootlegging": {
                "required": [
                    "online_store",
                    "dvd_sales",
                    "dvd_copies"
                ],
                "properties": {
                    "online_store": {
                        "description": "Online store statistics.",
                        "required": [
                            "earnings",
                            "visits",
                            "customers",
                            "sales"
                        ],
                        "properties": {
                            "earnings": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "visits": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "customers": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "sales": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    },
                    "dvd_sales": {
                        "description": "DVD sales statistics.",
                        "required": [
                            "action",
                            "comedy",
                            "drama",
                            "fantasy",
                            "horror",
                            "romance",
                            "thriller",
                            "sci_fi",
                            "total",
                            "earnings"
                        ],
                        "properties": {
                            "action": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "comedy": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "drama": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "fantasy": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "horror": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "romance": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "thriller": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "sci-fi": {
                                "description": "This is replaced with 'sci_fi' field and will be removed on 1st June 2025.",
                                "type": "integer",
                                "format": "int32",
                                "deprecated": true
                            },
                            "sci_fi": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "total": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "earnings": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    },
                    "dvds_copied": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeDetailsGraffiti": {
                "required": [
                    "cans_used",
                    "most_graffiti_in_one_area",
                    "most_graffiti_simultaneously",
                    "graffiti_removed",
                    "cost_to_city"
                ],
                "properties": {
                    "cans_used": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "most_graffiti_in_one_area": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "most_graffiti_simultaneously": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "graffiti_removed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "cost_to_city": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeDetailsShoplifting": {
                "required": [
                    "average_notoriety"
                ],
                "properties": {
                    "average_notoriety": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeDetailsCardSkimming": {
                "required": [
                    "card_details",
                    "skimmers"
                ],
                "properties": {
                    "card_details": {
                        "required": [
                            "recoverable",
                            "recovered",
                            "sold",
                            "lost",
                            "areas"
                        ],
                        "properties": {
                            "recoverable": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "recovered": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "sold": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "lost": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "areas": {
                                "type": "array",
                                "items": {
                                    "required": [
                                        "id",
                                        "amount"
                                    ],
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "amount": {
                                            "type": "integer",
                                            "format": "int32"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "skimmers": {
                        "required": [
                            "active",
                            "most_lucrative",
                            "oldest_recovered",
                            "lost"
                        ],
                        "properties": {
                            "active": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "most_lucrative": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "oldest_recovered": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "lost": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UserCrimeDetailsHustling": {
                "required": [
                    "total_audience_gathered",
                    "biggest_money_won",
                    "shill_money_collected",
                    "pickpocket_money_collected"
                ],
                "properties": {
                    "total_audience_gathered": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "biggest_money_won": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "shill_money_collected": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pickpocket_money_collected": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeDetailsCracking": {
                "required": [
                    "brute_force_cycles",
                    "encryption_layers_broken",
                    "highest_mips",
                    "chars_guessed",
                    "chars_guessed_total"
                ],
                "properties": {
                    "brute_force_cycles": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "encryption_layers_broken": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "highest_mips": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "chars_guessed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "chars_guessed_total": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeDetailsScamming": {
                "required": [
                    "most_responses",
                    "zones",
                    "concerns",
                    "payouts",
                    "emails"
                ],
                "properties": {
                    "most_responses": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    },
                    "zones": {
                        "required": [
                            "red",
                            "neutral",
                            "concern",
                            "sensitivity",
                            "temptation",
                            "hesitation",
                            "low_reward",
                            "medium_reward",
                            "high_reward"
                        ],
                        "properties": {
                            "red": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "neutral": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "concern": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "sensitivity": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "temptation": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "hesitation": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "low_reward": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "medium_reward": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "high_reward": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            }
                        },
                        "type": "object"
                    },
                    "concerns": {
                        "required": [
                            "attempts",
                            "resolved"
                        ],
                        "properties": {
                            "attempts": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "resolved": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            }
                        },
                        "type": "object"
                    },
                    "payouts": {
                        "required": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "properties": {
                            "low": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "medium": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "high": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            }
                        },
                        "type": "object"
                    },
                    "emails": {
                        "required": [
                            "scraper",
                            "phisher"
                        ],
                        "properties": {
                            "scraper": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            },
                            "phisher": {
                                "type": "integer",
                                "format": "int32",
                                "default": 0
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UserSubcrime": {
                "required": [
                    "id",
                    "total",
                    "success",
                    "fail"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "success": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fail": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeRewardAmmo": {
                "required": [
                    "standard",
                    "special"
                ],
                "properties": {
                    "standard": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "special": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeRewardItem": {
                "required": [
                    "id",
                    "amount"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeRewards": {
                "required": [
                    "money",
                    "ammo",
                    "items"
                ],
                "properties": {
                    "money": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "ammo": {
                        "$ref": "#/components/schemas/UserCrimeRewardAmmo"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserCrimeRewardItem"
                        }
                    }
                },
                "type": "object"
            },
            "UserCrimeAttempts": {
                "required": [
                    "total",
                    "success",
                    "fail",
                    "critical_fail",
                    "subcrimes"
                ],
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "success": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fail": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "critical_fail": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "subcrimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserSubcrime"
                        }
                    }
                },
                "type": "object"
            },
            "UserCrimeUniquesRewardMoney": {
                "required": [
                    "min",
                    "max"
                ],
                "properties": {
                    "min": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "max": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "UserCrimeUniquesRewardAmmo": {
                "required": [
                    "amount",
                    "type"
                ],
                "properties": {
                    "amount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "$ref": "#/components/schemas/UserCrimeUniquesRewardAmmoEnum"
                    }
                },
                "type": "object"
            },
            "UserCrimeUniquesReward": {
                "required": [
                    "items",
                    "money",
                    "ammo"
                ],
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserCrimeRewardItem"
                        }
                    },
                    "money": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserCrimeUniquesRewardMoney"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "ammo": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserCrimeUniquesRewardAmmo"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserCrimeUniques": {
                "required": [
                    "id",
                    "rewards"
                ],
                "properties": {
                    "id": {
                        "description": "Unique result id.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "rewards": {
                        "$ref": "#/components/schemas/UserCrimeUniquesReward"
                    }
                },
                "type": "object"
            },
            "UserCrimesResponse": {
                "required": [
                    "crimes"
                ],
                "properties": {
                    "crimes": {
                        "$ref": "#/components/schemas/UserCrime"
                    }
                },
                "type": "object"
            },
            "UserCrime": {
                "required": [
                    "nerve_spent",
                    "skill",
                    "progression_bonus",
                    "rewards",
                    "attempts",
                    "uniques",
                    "miscellaneous"
                ],
                "properties": {
                    "nerve_spent": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "skill": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "progression_bonus": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rewards": {
                        "$ref": "#/components/schemas/UserCrimeRewards"
                    },
                    "attempts": {
                        "$ref": "#/components/schemas/UserCrimeAttempts"
                    },
                    "uniques": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserCrimeUniques"
                        }
                    },
                    "miscellaneous": {
                        "description": " Miscellaneous stats for specific crime. Results differ based on the cat id.",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserCrimeDetailsBootlegging"
                            },
                            {
                                "$ref": "#/components/schemas/UserCrimeDetailsGraffiti"
                            },
                            {
                                "$ref": "#/components/schemas/UserCrimeDetailsShoplifting"
                            },
                            {
                                "$ref": "#/components/schemas/UserCrimeDetailsCardSkimming"
                            },
                            {
                                "$ref": "#/components/schemas/UserCrimeDetailsHustling"
                            },
                            {
                                "$ref": "#/components/schemas/UserCrimeDetailsCracking"
                            },
                            {
                                "$ref": "#/components/schemas/UserCrimeDetailsScamming"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserRacesResponse": {
                "required": [
                    "races",
                    "_metadata"
                ],
                "properties": {
                    "races": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RacingRaceDetailsResponse"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "UserRaceCarDetails": {
                "allOf": [
                    {
                        "required": [
                            "id",
                            "name",
                            "worth",
                            "points_spent",
                            "races_entered",
                            "races_won",
                            "is_removed",
                            "parts"
                        ],
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/RaceCarId"
                            },
                            "name": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ]
                            },
                            "worth": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "points_spent": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "races_entered": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "races_won": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "is_removed": {
                                "type": "boolean"
                            },
                            "parts": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RaceCarUpgradeId"
                                }
                            }
                        },
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/RaceCar"
                    }
                ]
            },
            "UserEnlistedCarsResponse": {
                "required": [
                    "enlistedcars"
                ],
                "properties": {
                    "enlistedcars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserRaceCarDetails"
                        }
                    }
                },
                "type": "object"
            },
            "UserForumPostsResponse": {
                "required": [
                    "forumPosts",
                    "_metadata"
                ],
                "properties": {
                    "forumPosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumPost"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "UserForumThreadsResponse": {
                "required": [
                    "forumThreads",
                    "_metadata"
                ],
                "properties": {
                    "forumThreads": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumThreadUserExtended"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "UserForumSubscribedThreadsResponse": {
                "required": [
                    "forumSbuscribedThreads"
                ],
                "properties": {
                    "forumSubscribedThreads": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumSubscribedThread"
                        }
                    }
                },
                "type": "object"
            },
            "UserForumFeedResponse": {
                "required": [
                    "forumFeed"
                ],
                "properties": {
                    "forumFeed": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumFeed"
                        }
                    }
                },
                "type": "object"
            },
            "UserForumFriendsResponse": {
                "required": [
                    "forumFriends"
                ],
                "properties": {
                    "forumFriends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ForumFeed"
                        }
                    }
                },
                "type": "object"
            },
            "HofValue": {
                "required": [
                    "value",
                    "rank"
                ],
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "rank": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "type": "object"
            },
            "HofValueString": {
                "required": [
                    "value",
                    "rank"
                ],
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "rank": {
                        "oneOf": [
                            {
                                "type": "number",
                                "format": "int32"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserHofStats": {
                "required": [
                    "attacks",
                    "busts",
                    "defends",
                    "networth",
                    "offences",
                    "revives",
                    "level",
                    "rank",
                    "awards",
                    "racing_skill",
                    "racing_points",
                    "racing_wins",
                    "travel_time",
                    "working_stats",
                    "battle_stats"
                ],
                "properties": {
                    "attacks": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "busts": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "defends": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "networth": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "offences": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "revives": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "level": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "rank": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "awards": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "racing_skill": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "racing_points": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "racing_wins": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "travel_time": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "working_stats": {
                        "$ref": "#/components/schemas/HofValue"
                    },
                    "battle_stats": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/HofValue"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserHofResponse": {
                "required": [
                    "hof"
                ],
                "properties": {
                    "hof": {
                        "$ref": "#/components/schemas/UserHofStats"
                    }
                },
                "type": "object"
            },
            "UserCalendar": {
                "required": [
                    "start_time"
                ],
                "properties": {
                    "start_time": {
                        "description": "Event start time displayed in TCT.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UserCalendarResponse": {
                "required": [
                    "calendar"
                ],
                "properties": {
                    "calendar": {
                        "$ref": "#/components/schemas/UserCalendar"
                    }
                },
                "type": "object"
            },
            "UserBountiesResponse": {
                "required": [
                    "bounties"
                ],
                "properties": {
                    "bounties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Bounty"
                        }
                    }
                },
                "type": "object"
            },
            "UserJobRanks": {
                "required": [
                    "army",
                    "grocer",
                    "casino",
                    "medical",
                    "law",
                    "education"
                ],
                "properties": {
                    "army": {
                        "$ref": "#/components/schemas/JobPositionArmyEnum"
                    },
                    "grocer": {
                        "$ref": "#/components/schemas/JobPositionGrocerEnum"
                    },
                    "casino": {
                        "$ref": "#/components/schemas/JobPositionCasinoEnum"
                    },
                    "medical": {
                        "$ref": "#/components/schemas/JobPositionMedicalEnum"
                    },
                    "law": {
                        "$ref": "#/components/schemas/JobPositionLawEnum"
                    },
                    "education": {
                        "$ref": "#/components/schemas/JobPositionEducationEnum"
                    }
                },
                "type": "object"
            },
            "UserJobRanksResponse": {
                "required": [
                    "jobranks"
                ],
                "properties": {
                    "jobranks": {
                        "$ref": "#/components/schemas/UserJobRanks"
                    }
                },
                "type": "object"
            },
            "UserItemMarkeListingItemDetails": {
                "required": [
                    "id",
                    "name",
                    "type",
                    "rarity",
                    "uid",
                    "stats",
                    "bonuses"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "rarity": {
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "yellow",
                                    "orange",
                                    "red"
                                ]
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "uid": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ItemUid"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "stats": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ItemMarketListingItemStats"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "bonuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemMarketListingItemBonus"
                        }
                    }
                },
                "type": "object"
            },
            "UserItemMarketListing": {
                "required": [
                    "id",
                    "price",
                    "average_price",
                    "amount",
                    "is_anonymous",
                    "available",
                    "item"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "price": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "average_price": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "is_anonymous": {
                        "type": "boolean"
                    },
                    "available": {
                        "description": "Amount remaining in the inventory.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "item": {
                        "$ref": "#/components/schemas/UserItemMarkeListingItemDetails"
                    }
                },
                "type": "object"
            },
            "UserItemMarketResponse": {
                "required": [
                    "itemmarket",
                    "_metadata"
                ],
                "properties": {
                    "itemmarket": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserItemMarketListing"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "UserFactionBalance": {
                "required": [
                    "money",
                    "points"
                ],
                "properties": {
                    "money": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "points": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "type": "object"
            },
            "UserFactionBalanceResponse": {
                "required": [
                    "factionBalance"
                ],
                "properties": {
                    "factionBalance": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserFactionBalance"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserOrganizedCrimeResponse": {
                "required": [
                    "organizedCrime"
                ],
                "properties": {
                    "organizedCrime": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionCrime"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UserList": {
                "required": [
                    "id",
                    "name",
                    "level",
                    "faction_id",
                    "last_action",
                    "status"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/UserId"
                    },
                    "name": {
                        "type": "string"
                    },
                    "level": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "faction_id": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FactionId"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "last_action": {
                        "$ref": "#/components/schemas/UserLastAction"
                    },
                    "status": {
                        "$ref": "#/components/schemas/UserStatus"
                    }
                },
                "type": "object"
            },
            "UserListResponse": {
                "required": [
                    "list",
                    "_metadata"
                ],
                "properties": {
                    "list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserList"
                        }
                    },
                    "_metadata": {
                        "$ref": "#/components/schemas/RequestMetadataWithLinks"
                    }
                },
                "type": "object"
            },
            "UserSelectionName": {
                "description": "The following selections will fallback to API v1 and may change at any time: 'ammo','bars','basic','battlestats','bazaar','cooldowns','criminalrecord','discord','display','education','equipment','events','gym','honors','icons','inventory','jobpoints','log','medals','merits','messages','missions','money','networth','newevents','newmessages','notifications','perks','profile','properties','refills','reports','skills','stocks','travel','weaponexp','workstats'.",
                "type": "string",
                "enum": [
                    "attacks",
                    "attacksfull",
                    "bounties",
                    "calendar",
                    "crimes",
                    "enlistedcars",
                    "factionbalance",
                    "forumfeed",
                    "forumfriends",
                    "forumposts",
                    "forumsubscribedthreads",
                    "forumthreads",
                    "hof",
                    "itemmarket",
                    "jobranks",
                    "list",
                    "lookup",
                    "organizedcrime",
                    "personalstats",
                    "races",
                    "revives",
                    "revivesfull",
                    "timestamp",
                    "ammo",
                    "bars",
                    "basic",
                    "battlestats",
                    "bazaar",
                    "cooldowns",
                    "criminalrecord",
                    "discord",
                    "display",
                    "education",
                    "equipment",
                    "events",
                    "gym",
                    "honors",
                    "icons",
                    "inventory",
                    "jobpoints",
                    "log",
                    "medals",
                    "merits",
                    "messages",
                    "missions",
                    "money",
                    "networth",
                    "newevents",
                    "newmessages",
                    "notifications",
                    "perks",
                    "profile",
                    "properties",
                    "refills",
                    "reports",
                    "skills",
                    "stocks",
                    "travel",
                    "weaponexp",
                    "workstats"
                ]
            },
            "UserLookupResponse": {
                "required": [
                    "selections"
                ],
                "properties": {
                    "selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserSelectionName"
                        }
                    }
                },
                "type": "object"
            }
        },
        "parameters": {
            "ApiKeyPublic": {
                "name": "key",
                "in": "query",
                "description": "API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ApiKeyMinimal": {
                "name": "key",
                "in": "query",
                "description": "API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ApiKeyLimited": {
                "name": "key",
                "in": "query",
                "description": "API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ApiTimestamp": {
                "name": "timestamp",
                "in": "query",
                "description": "Timestamp to bypass cache",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ApiComment": {
                "name": "comment",
                "in": "query",
                "description": "Comment for your tool/service/bot/website to be visible in the logs.",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ApiLimit20": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "maximum": 20,
                    "minimum": 1
                }
            },
            "ApiLimit100Default20": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "maximum": 100,
                    "minimum": 1
                }
            },
            "ApiLimit1000Default20": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "maximum": 1000,
                    "minimum": 1
                }
            },
            "ApiLimit50": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 50,
                    "maximum": 50,
                    "minimum": 1
                }
            },
            "ApiLimit100": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 100,
                    "maximum": 100,
                    "minimum": 1
                }
            },
            "ApiLimit250Default20": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "maximum": 250,
                    "minimum": 1
                }
            },
            "ApiLimit500Default20": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 20,
                    "maximum": 500,
                    "minimum": 1
                }
            },
            "ApiLimit1000": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1000,
                    "maximum": 1000,
                    "minimum": 1
                }
            },
            "ApiLimit": {
                "name": "limit",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                }
            },
            "ApiSort": {
                "name": "sort",
                "in": "query",
                "description": "Sorted by the greatest timestamps",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "DESC",
                        "ASC"
                    ]
                }
            },
            "ApiSortDesc": {
                "name": "sort",
                "in": "query",
                "description": "Sorted by the greatest timestamps",
                "required": false,
                "schema": {
                    "type": "string",
                    "default": "DESC",
                    "enum": [
                        "DESC",
                        "ASC"
                    ]
                }
            },
            "ApiSortAsc": {
                "name": "sort",
                "in": "query",
                "description": "Sort rows from newest to oldest<br>Default ordering is ascending",
                "required": false,
                "schema": {
                    "type": "string",
                    "default": "ASC",
                    "enum": [
                        "DESC",
                        "ASC"
                    ]
                }
            },
            "ApiTo": {
                "name": "to",
                "in": "query",
                "description": "Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "ApiFrom": {
                "name": "from",
                "in": "query",
                "description": "Timestamp that sets the lower limit for the data returned. Data returned will be after this time",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "ApiOffset": {
                "name": "offset",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0,
                    "minimum": 0
                }
            },
            "ApiOffsetNoDefault": {
                "name": "offset",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                }
            },
            "ApiStripTagsTrue": {
                "name": "striptags",
                "in": "query",
                "description": "Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').",
                "required": false,
                "schema": {
                    "type": "string",
                    "default": "true",
                    "enum": [
                        "true",
                        "false"
                    ]
                }
            },
            "ApiStripTagsFalse": {
                "name": "striptags",
                "in": "query",
                "description": "Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').",
                "required": false,
                "schema": {
                    "type": "string",
                    "default": "false",
                    "enum": [
                        "true",
                        "false"
                    ]
                }
            },
            "ApiStripTags": {
                "name": "striptags",
                "in": "query",
                "description": "Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "true",
                        "false"
                    ]
                }
            }
        },
        "securitySchemes": {
            "api_key": {
                "type": "apiKey",
                "description": "Pass your API key as the value.<br>Example header:<br>Authorization: ApiKey rnavT95qnTCTAbdK<br>The 'ApiKey' prefix is automatically added in Swagger.",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "User",
            "description": "Part of User section"
        },
        {
            "name": "Faction",
            "description": "Part of Faction section"
        },
        {
            "name": "Market",
            "description": "Part of Market section"
        },
        {
            "name": "Racing",
            "description": "Part of Racing section"
        },
        {
            "name": "Forum",
            "description": "Part of Forum section"
        },
        {
            "name": "Key",
            "description": "Part of Key section"
        },
        {
            "name": "Torn",
            "description": "Part of Torn section"
        }
    ]
}